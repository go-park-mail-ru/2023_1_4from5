// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_4from5/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCommentUsecase is a mock of CommentUsecase interface.
type MockCommentUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCommentUsecaseMockRecorder
}

// MockCommentUsecaseMockRecorder is the mock recorder for MockCommentUsecase.
type MockCommentUsecaseMockRecorder struct {
	mock *MockCommentUsecase
}

// NewMockCommentUsecase creates a new mock instance.
func NewMockCommentUsecase(ctrl *gomock.Controller) *MockCommentUsecase {
	mock := &MockCommentUsecase{ctrl: ctrl}
	mock.recorder = &MockCommentUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentUsecase) EXPECT() *MockCommentUsecaseMockRecorder {
	return m.recorder
}

// AddLike mocks base method.
func (m *MockCommentUsecase) AddLike(ctx context.Context, commentInfo models.Comment) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLike", ctx, commentInfo)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLike indicates an expected call of AddLike.
func (mr *MockCommentUsecaseMockRecorder) AddLike(ctx, commentInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLike", reflect.TypeOf((*MockCommentUsecase)(nil).AddLike), ctx, commentInfo)
}

// CreateComment mocks base method.
func (m *MockCommentUsecase) CreateComment(ctx context.Context, commentData models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, commentData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentUsecaseMockRecorder) CreateComment(ctx, commentData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentUsecase)(nil).CreateComment), ctx, commentData)
}

// DeleteComment mocks base method.
func (m *MockCommentUsecase) DeleteComment(ctx context.Context, commentData models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, commentData)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentUsecaseMockRecorder) DeleteComment(ctx, commentData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentUsecase)(nil).DeleteComment), ctx, commentData)
}

// EditComment mocks base method.
func (m *MockCommentUsecase) EditComment(ctx context.Context, commentInfo models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", ctx, commentInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditComment indicates an expected call of EditComment.
func (mr *MockCommentUsecaseMockRecorder) EditComment(ctx, commentInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockCommentUsecase)(nil).EditComment), ctx, commentInfo)
}

// IsCommentOwner mocks base method.
func (m *MockCommentUsecase) IsCommentOwner(ctx context.Context, commentInfo models.Comment) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCommentOwner", ctx, commentInfo)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCommentOwner indicates an expected call of IsCommentOwner.
func (mr *MockCommentUsecaseMockRecorder) IsCommentOwner(ctx, commentInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCommentOwner", reflect.TypeOf((*MockCommentUsecase)(nil).IsCommentOwner), ctx, commentInfo)
}

// RemoveLike mocks base method.
func (m *MockCommentUsecase) RemoveLike(ctx context.Context, commentInfo models.Comment) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLike", ctx, commentInfo)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLike indicates an expected call of RemoveLike.
func (mr *MockCommentUsecaseMockRecorder) RemoveLike(ctx, commentInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLike", reflect.TypeOf((*MockCommentUsecase)(nil).RemoveLike), ctx, commentInfo)
}

// MockCommentRepo is a mock of CommentRepo interface.
type MockCommentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepoMockRecorder
}

// MockCommentRepoMockRecorder is the mock recorder for MockCommentRepo.
type MockCommentRepoMockRecorder struct {
	mock *MockCommentRepo
}

// NewMockCommentRepo creates a new mock instance.
func NewMockCommentRepo(ctrl *gomock.Controller) *MockCommentRepo {
	mock := &MockCommentRepo{ctrl: ctrl}
	mock.recorder = &MockCommentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepo) EXPECT() *MockCommentRepoMockRecorder {
	return m.recorder
}

// AddLike mocks base method.
func (m *MockCommentRepo) AddLike(ctx context.Context, commentInfo models.Comment) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLike", ctx, commentInfo)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLike indicates an expected call of AddLike.
func (mr *MockCommentRepoMockRecorder) AddLike(ctx, commentInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLike", reflect.TypeOf((*MockCommentRepo)(nil).AddLike), ctx, commentInfo)
}

// CreateComment mocks base method.
func (m *MockCommentRepo) CreateComment(ctx context.Context, commentData models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, commentData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentRepoMockRecorder) CreateComment(ctx, commentData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentRepo)(nil).CreateComment), ctx, commentData)
}

// DeleteComment mocks base method.
func (m *MockCommentRepo) DeleteComment(ctx context.Context, commentData models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, commentData)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentRepoMockRecorder) DeleteComment(ctx, commentData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentRepo)(nil).DeleteComment), ctx, commentData)
}

// EditComment mocks base method.
func (m *MockCommentRepo) EditComment(ctx context.Context, commentInfo models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", ctx, commentInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditComment indicates an expected call of EditComment.
func (mr *MockCommentRepoMockRecorder) EditComment(ctx, commentInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockCommentRepo)(nil).EditComment), ctx, commentInfo)
}

// IsCommentOwner mocks base method.
func (m *MockCommentRepo) IsCommentOwner(ctx context.Context, commentInfo models.Comment) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCommentOwner", ctx, commentInfo)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCommentOwner indicates an expected call of IsCommentOwner.
func (mr *MockCommentRepoMockRecorder) IsCommentOwner(ctx, commentInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCommentOwner", reflect.TypeOf((*MockCommentRepo)(nil).IsCommentOwner), ctx, commentInfo)
}

// RemoveLike mocks base method.
func (m *MockCommentRepo) RemoveLike(ctx context.Context, commentInfo models.Comment) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLike", ctx, commentInfo)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLike indicates an expected call of RemoveLike.
func (mr *MockCommentRepoMockRecorder) RemoveLike(ctx, commentInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLike", reflect.TypeOf((*MockCommentRepo)(nil).RemoveLike), ctx, commentInfo)
}
