// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_4from5/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// Donate mocks base method.
func (m *MockUserUsecase) Donate(ctx context.Context, donateInfo models.Donate, userID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Donate", ctx, donateInfo, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Donate indicates an expected call of Donate.
func (mr *MockUserUsecaseMockRecorder) Donate(ctx, donateInfo, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Donate", reflect.TypeOf((*MockUserUsecase)(nil).Donate), ctx, donateInfo, userID)
}

// GetHomePage mocks base method.
func (m *MockUserUsecase) GetHomePage(ctx context.Context, details models.AccessDetails) (models.UserHomePage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomePage", ctx, details)
	ret0, _ := ret[0].(models.UserHomePage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHomePage indicates an expected call of GetHomePage.
func (mr *MockUserUsecaseMockRecorder) GetHomePage(ctx, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomePage", reflect.TypeOf((*MockUserUsecase)(nil).GetHomePage), ctx, details)
}

// GetProfile mocks base method.
func (m *MockUserUsecase) GetProfile(ctx context.Context, details models.AccessDetails) (models.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, details)
	ret0, _ := ret[0].(models.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockUserUsecaseMockRecorder) GetProfile(ctx, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockUserUsecase)(nil).GetProfile), ctx, details)
}

// UpdatePassword mocks base method.
func (m *MockUserUsecase) UpdatePassword(ctx context.Context, id uuid.UUID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, id, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserUsecaseMockRecorder) UpdatePassword(ctx, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserUsecase)(nil).UpdatePassword), ctx, id, password)
}

// UpdatePhoto mocks base method.
func (m *MockUserUsecase) UpdatePhoto(ctx context.Context, details models.AccessDetails) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoto", ctx, details)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhoto indicates an expected call of UpdatePhoto.
func (mr *MockUserUsecaseMockRecorder) UpdatePhoto(ctx, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoto", reflect.TypeOf((*MockUserUsecase)(nil).UpdatePhoto), ctx, details)
}

// UpdateProfileInfo mocks base method.
func (m *MockUserUsecase) UpdateProfileInfo(ctx context.Context, profileInfo models.UpdateProfileInfo, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileInfo", ctx, profileInfo, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfileInfo indicates an expected call of UpdateProfileInfo.
func (mr *MockUserUsecaseMockRecorder) UpdateProfileInfo(ctx, profileInfo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileInfo", reflect.TypeOf((*MockUserUsecase)(nil).UpdateProfileInfo), ctx, profileInfo, id)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Donate mocks base method.
func (m *MockUserRepo) Donate(ctx context.Context, donateInfo models.Donate, userID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Donate", ctx, donateInfo, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Donate indicates an expected call of Donate.
func (mr *MockUserRepoMockRecorder) Donate(ctx, donateInfo, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Donate", reflect.TypeOf((*MockUserRepo)(nil).Donate), ctx, donateInfo, userID)
}

// GetHomePage mocks base method.
func (m *MockUserRepo) GetHomePage(ctx context.Context, id uuid.UUID) (models.UserHomePage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomePage", ctx, id)
	ret0, _ := ret[0].(models.UserHomePage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHomePage indicates an expected call of GetHomePage.
func (mr *MockUserRepoMockRecorder) GetHomePage(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomePage", reflect.TypeOf((*MockUserRepo)(nil).GetHomePage), ctx, id)
}

// GetUserProfile mocks base method.
func (m *MockUserRepo) GetUserProfile(ctx context.Context, id uuid.UUID) (models.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", ctx, id)
	ret0, _ := ret[0].(models.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUserRepoMockRecorder) GetUserProfile(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUserRepo)(nil).GetUserProfile), ctx, id)
}

// UpdatePassword mocks base method.
func (m *MockUserRepo) UpdatePassword(ctx context.Context, id uuid.UUID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, id, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRepoMockRecorder) UpdatePassword(ctx, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRepo)(nil).UpdatePassword), ctx, id, password)
}

// UpdateProfileInfo mocks base method.
func (m *MockUserRepo) UpdateProfileInfo(ctx context.Context, profileInfo models.UpdateProfileInfo, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileInfo", ctx, profileInfo, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfileInfo indicates an expected call of UpdateProfileInfo.
func (mr *MockUserRepoMockRecorder) UpdateProfileInfo(ctx, profileInfo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileInfo", reflect.TypeOf((*MockUserRepo)(nil).UpdateProfileInfo), ctx, profileInfo, id)
}

// UpdateProfilePhoto mocks base method.
func (m *MockUserRepo) UpdateProfilePhoto(ctx context.Context, userID, path uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfilePhoto", ctx, userID, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfilePhoto indicates an expected call of UpdateProfilePhoto.
func (mr *MockUserRepoMockRecorder) UpdateProfilePhoto(ctx, userID, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfilePhoto", reflect.TypeOf((*MockUserRepo)(nil).UpdateProfilePhoto), ctx, userID, path)
}
