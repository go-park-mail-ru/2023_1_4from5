// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: user.proto

package generated

import (
	context "context"
	proto "github.com/go-park-mail-ru/2023_1_4from5/internal/models/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Follow(ctx context.Context, in *FollowMessage, opts ...grpc.CallOption) (*proto.Empty, error)
	Unfollow(ctx context.Context, in *FollowMessage, opts ...grpc.CallOption) (*proto.Empty, error)
	Subscribe(ctx context.Context, in *PaymentInfo, opts ...grpc.CallOption) (*SubscriptionName, error)
	AddPaymentInfo(ctx context.Context, in *SubscriptionDetails, opts ...grpc.CallOption) (*proto.Empty, error)
	GetProfile(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*UserProfile, error)
	UpdatePhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*ImageID, error)
	DeletePhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.Empty, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordMessage, opts ...grpc.CallOption) (*proto.Empty, error)
	UpdateProfileInfo(ctx context.Context, in *UpdateProfileInfoMessage, opts ...grpc.CallOption) (*proto.Empty, error)
	Donate(ctx context.Context, in *DonateMessage, opts ...grpc.CallOption) (*DonateResponse, error)
	BecomeCreator(ctx context.Context, in *BecameCreatorInfoMessage, opts ...grpc.CallOption) (*proto.UUIDResponse, error)
	UserSubscriptions(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*SubscriptionsMessage, error)
	UserFollows(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*FollowsMessage, error)
	CheckIfCreator(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*CheckCreatorMessage, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Follow(ctx context.Context, in *FollowMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/UserService/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Unfollow(ctx context.Context, in *FollowMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/UserService/Unfollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Subscribe(ctx context.Context, in *PaymentInfo, opts ...grpc.CallOption) (*SubscriptionName, error) {
	out := new(SubscriptionName)
	err := c.cc.Invoke(ctx, "/UserService/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddPaymentInfo(ctx context.Context, in *SubscriptionDetails, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/UserService/AddPaymentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetProfile(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*UserProfile, error) {
	out := new(UserProfile)
	err := c.cc.Invoke(ctx, "/UserService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*ImageID, error) {
	out := new(ImageID)
	err := c.cc.Invoke(ctx, "/UserService/UpdatePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeletePhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/UserService/DeletePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/UserService/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateProfileInfo(ctx context.Context, in *UpdateProfileInfoMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/UserService/UpdateProfileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Donate(ctx context.Context, in *DonateMessage, opts ...grpc.CallOption) (*DonateResponse, error) {
	out := new(DonateResponse)
	err := c.cc.Invoke(ctx, "/UserService/Donate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BecomeCreator(ctx context.Context, in *BecameCreatorInfoMessage, opts ...grpc.CallOption) (*proto.UUIDResponse, error) {
	out := new(proto.UUIDResponse)
	err := c.cc.Invoke(ctx, "/UserService/BecomeCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserSubscriptions(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*SubscriptionsMessage, error) {
	out := new(SubscriptionsMessage)
	err := c.cc.Invoke(ctx, "/UserService/UserSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserFollows(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*FollowsMessage, error) {
	out := new(FollowsMessage)
	err := c.cc.Invoke(ctx, "/UserService/UserFollows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckIfCreator(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*CheckCreatorMessage, error) {
	out := new(CheckCreatorMessage)
	err := c.cc.Invoke(ctx, "/UserService/CheckIfCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	Follow(context.Context, *FollowMessage) (*proto.Empty, error)
	Unfollow(context.Context, *FollowMessage) (*proto.Empty, error)
	Subscribe(context.Context, *PaymentInfo) (*SubscriptionName, error)
	AddPaymentInfo(context.Context, *SubscriptionDetails) (*proto.Empty, error)
	GetProfile(context.Context, *proto.UUIDMessage) (*UserProfile, error)
	UpdatePhoto(context.Context, *proto.UUIDMessage) (*ImageID, error)
	DeletePhoto(context.Context, *proto.UUIDMessage) (*proto.Empty, error)
	UpdatePassword(context.Context, *UpdatePasswordMessage) (*proto.Empty, error)
	UpdateProfileInfo(context.Context, *UpdateProfileInfoMessage) (*proto.Empty, error)
	Donate(context.Context, *DonateMessage) (*DonateResponse, error)
	BecomeCreator(context.Context, *BecameCreatorInfoMessage) (*proto.UUIDResponse, error)
	UserSubscriptions(context.Context, *proto.UUIDMessage) (*SubscriptionsMessage, error)
	UserFollows(context.Context, *proto.UUIDMessage) (*FollowsMessage, error)
	CheckIfCreator(context.Context, *proto.UUIDMessage) (*CheckCreatorMessage, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Follow(context.Context, *FollowMessage) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedUserServiceServer) Unfollow(context.Context, *FollowMessage) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (UnimplementedUserServiceServer) Subscribe(context.Context, *PaymentInfo) (*SubscriptionName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedUserServiceServer) AddPaymentInfo(context.Context, *SubscriptionDetails) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaymentInfo not implemented")
}
func (UnimplementedUserServiceServer) GetProfile(context.Context, *proto.UUIDMessage) (*UserProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedUserServiceServer) UpdatePhoto(context.Context, *proto.UUIDMessage) (*ImageID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhoto not implemented")
}
func (UnimplementedUserServiceServer) DeletePhoto(context.Context, *proto.UUIDMessage) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoto not implemented")
}
func (UnimplementedUserServiceServer) UpdatePassword(context.Context, *UpdatePasswordMessage) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedUserServiceServer) UpdateProfileInfo(context.Context, *UpdateProfileInfoMessage) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfileInfo not implemented")
}
func (UnimplementedUserServiceServer) Donate(context.Context, *DonateMessage) (*DonateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Donate not implemented")
}
func (UnimplementedUserServiceServer) BecomeCreator(context.Context, *BecameCreatorInfoMessage) (*proto.UUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BecomeCreator not implemented")
}
func (UnimplementedUserServiceServer) UserSubscriptions(context.Context, *proto.UUIDMessage) (*SubscriptionsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSubscriptions not implemented")
}
func (UnimplementedUserServiceServer) UserFollows(context.Context, *proto.UUIDMessage) (*FollowsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFollows not implemented")
}
func (UnimplementedUserServiceServer) CheckIfCreator(context.Context, *proto.UUIDMessage) (*CheckCreatorMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfCreator not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Follow(ctx, req.(*FollowMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/Unfollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Unfollow(ctx, req.(*FollowMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Subscribe(ctx, req.(*PaymentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddPaymentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddPaymentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/AddPaymentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddPaymentInfo(ctx, req.(*SubscriptionDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetProfile(ctx, req.(*proto.UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/UpdatePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePhoto(ctx, req.(*proto.UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeletePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeletePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/DeletePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeletePhoto(ctx, req.(*proto.UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePassword(ctx, req.(*UpdatePasswordMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateProfileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileInfoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateProfileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/UpdateProfileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateProfileInfo(ctx, req.(*UpdateProfileInfoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Donate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Donate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/Donate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Donate(ctx, req.(*DonateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BecomeCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BecameCreatorInfoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BecomeCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/BecomeCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BecomeCreator(ctx, req.(*BecameCreatorInfoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/UserSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserSubscriptions(ctx, req.(*proto.UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/UserFollows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserFollows(ctx, req.(*proto.UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckIfCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckIfCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/CheckIfCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckIfCreator(ctx, req.(*proto.UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Follow",
			Handler:    _UserService_Follow_Handler,
		},
		{
			MethodName: "Unfollow",
			Handler:    _UserService_Unfollow_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _UserService_Subscribe_Handler,
		},
		{
			MethodName: "AddPaymentInfo",
			Handler:    _UserService_AddPaymentInfo_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _UserService_GetProfile_Handler,
		},
		{
			MethodName: "UpdatePhoto",
			Handler:    _UserService_UpdatePhoto_Handler,
		},
		{
			MethodName: "DeletePhoto",
			Handler:    _UserService_DeletePhoto_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _UserService_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateProfileInfo",
			Handler:    _UserService_UpdateProfileInfo_Handler,
		},
		{
			MethodName: "Donate",
			Handler:    _UserService_Donate_Handler,
		},
		{
			MethodName: "BecomeCreator",
			Handler:    _UserService_BecomeCreator_Handler,
		},
		{
			MethodName: "UserSubscriptions",
			Handler:    _UserService_UserSubscriptions_Handler,
		},
		{
			MethodName: "UserFollows",
			Handler:    _UserService_UserFollows_Handler,
		},
		{
			MethodName: "CheckIfCreator",
			Handler:    _UserService_CheckIfCreator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
