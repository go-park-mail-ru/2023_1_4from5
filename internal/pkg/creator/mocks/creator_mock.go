// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_4from5/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCreatorUsecase is a mock of CreatorUsecase interface.
type MockCreatorUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorUsecaseMockRecorder
}

// MockCreatorUsecaseMockRecorder is the mock recorder for MockCreatorUsecase.
type MockCreatorUsecaseMockRecorder struct {
	mock *MockCreatorUsecase
}

// NewMockCreatorUsecase creates a new mock instance.
func NewMockCreatorUsecase(ctrl *gomock.Controller) *MockCreatorUsecase {
	mock := &MockCreatorUsecase{ctrl: ctrl}
	mock.recorder = &MockCreatorUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreatorUsecase) EXPECT() *MockCreatorUsecaseMockRecorder {
	return m.recorder
}

// CheckIfCreator mocks base method.
func (m *MockCreatorUsecase) CheckIfCreator(ctx context.Context, userID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfCreator", ctx, userID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfCreator indicates an expected call of CheckIfCreator.
func (mr *MockCreatorUsecaseMockRecorder) CheckIfCreator(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfCreator", reflect.TypeOf((*MockCreatorUsecase)(nil).CheckIfCreator), ctx, userID)
}

// CreateAim mocks base method.
func (m *MockCreatorUsecase) CreateAim(ctx context.Context, aimInfo models.Aim) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAim", ctx, aimInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAim indicates an expected call of CreateAim.
func (mr *MockCreatorUsecaseMockRecorder) CreateAim(ctx, aimInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAim", reflect.TypeOf((*MockCreatorUsecase)(nil).CreateAim), ctx, aimInfo)
}

// CreatorNotificationInfo mocks base method.
func (m *MockCreatorUsecase) CreatorNotificationInfo(ctx context.Context, creatorID uuid.UUID) (models.NotificationCreatorInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatorNotificationInfo", ctx, creatorID)
	ret0, _ := ret[0].(models.NotificationCreatorInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatorNotificationInfo indicates an expected call of CreatorNotificationInfo.
func (mr *MockCreatorUsecaseMockRecorder) CreatorNotificationInfo(ctx, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatorNotificationInfo", reflect.TypeOf((*MockCreatorUsecase)(nil).CreatorNotificationInfo), ctx, creatorID)
}

// DeleteCoverPhoto mocks base method.
func (m *MockCreatorUsecase) DeleteCoverPhoto(ctx context.Context, creatorId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoverPhoto", ctx, creatorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCoverPhoto indicates an expected call of DeleteCoverPhoto.
func (mr *MockCreatorUsecaseMockRecorder) DeleteCoverPhoto(ctx, creatorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoverPhoto", reflect.TypeOf((*MockCreatorUsecase)(nil).DeleteCoverPhoto), ctx, creatorId)
}

// DeleteProfilePhoto mocks base method.
func (m *MockCreatorUsecase) DeleteProfilePhoto(ctx context.Context, creatorId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfilePhoto", ctx, creatorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfilePhoto indicates an expected call of DeleteProfilePhoto.
func (mr *MockCreatorUsecaseMockRecorder) DeleteProfilePhoto(ctx, creatorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfilePhoto", reflect.TypeOf((*MockCreatorUsecase)(nil).DeleteProfilePhoto), ctx, creatorId)
}

// FindCreators mocks base method.
func (m *MockCreatorUsecase) FindCreators(ctx context.Context, keyword string) ([]models.Creator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCreators", ctx, keyword)
	ret0, _ := ret[0].([]models.Creator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCreators indicates an expected call of FindCreators.
func (mr *MockCreatorUsecaseMockRecorder) FindCreators(ctx, keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCreators", reflect.TypeOf((*MockCreatorUsecase)(nil).FindCreators), ctx, keyword)
}

// GetAllCreators mocks base method.
func (m *MockCreatorUsecase) GetAllCreators(ctx context.Context) ([]models.Creator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCreators", ctx)
	ret0, _ := ret[0].([]models.Creator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCreators indicates an expected call of GetAllCreators.
func (mr *MockCreatorUsecaseMockRecorder) GetAllCreators(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCreators", reflect.TypeOf((*MockCreatorUsecase)(nil).GetAllCreators), ctx)
}

// GetCreatorBalance mocks base method.
func (m *MockCreatorUsecase) GetCreatorBalance(ctx context.Context, creatorID uuid.UUID) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatorBalance", ctx, creatorID)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatorBalance indicates an expected call of GetCreatorBalance.
func (mr *MockCreatorUsecaseMockRecorder) GetCreatorBalance(ctx, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatorBalance", reflect.TypeOf((*MockCreatorUsecase)(nil).GetCreatorBalance), ctx, creatorID)
}

// GetFeed mocks base method.
func (m *MockCreatorUsecase) GetFeed(ctx context.Context, userID uuid.UUID) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", ctx, userID)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockCreatorUsecaseMockRecorder) GetFeed(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockCreatorUsecase)(nil).GetFeed), ctx, userID)
}

// GetPage mocks base method.
func (m *MockCreatorUsecase) GetPage(ctx context.Context, userID, creatorID uuid.UUID) (models.CreatorPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", ctx, userID, creatorID)
	ret0, _ := ret[0].(models.CreatorPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockCreatorUsecaseMockRecorder) GetPage(ctx, userID, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockCreatorUsecase)(nil).GetPage), ctx, userID, creatorID)
}

// Statistics mocks base method.
func (m *MockCreatorUsecase) Statistics(ctx context.Context, statsInput models.StatisticsDates) (models.Statistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics", ctx, statsInput)
	ret0, _ := ret[0].(models.Statistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics.
func (mr *MockCreatorUsecaseMockRecorder) Statistics(ctx, statsInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockCreatorUsecase)(nil).Statistics), ctx, statsInput)
}

// StatisticsFirstDate mocks base method.
func (m *MockCreatorUsecase) StatisticsFirstDate(ctx context.Context, creatorID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatisticsFirstDate", ctx, creatorID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatisticsFirstDate indicates an expected call of StatisticsFirstDate.
func (mr *MockCreatorUsecaseMockRecorder) StatisticsFirstDate(ctx, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatisticsFirstDate", reflect.TypeOf((*MockCreatorUsecase)(nil).StatisticsFirstDate), ctx, creatorID)
}

// UpdateBalance mocks base method.
func (m *MockCreatorUsecase) UpdateBalance(ctx context.Context, transfer models.CreatorTransfer) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, transfer)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockCreatorUsecaseMockRecorder) UpdateBalance(ctx, transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockCreatorUsecase)(nil).UpdateBalance), ctx, transfer)
}

// UpdateCoverPhoto mocks base method.
func (m *MockCreatorUsecase) UpdateCoverPhoto(ctx context.Context, creatorId uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoverPhoto", ctx, creatorId)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCoverPhoto indicates an expected call of UpdateCoverPhoto.
func (mr *MockCreatorUsecaseMockRecorder) UpdateCoverPhoto(ctx, creatorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoverPhoto", reflect.TypeOf((*MockCreatorUsecase)(nil).UpdateCoverPhoto), ctx, creatorId)
}

// UpdateCreatorData mocks base method.
func (m *MockCreatorUsecase) UpdateCreatorData(ctx context.Context, updateData models.UpdateCreatorInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCreatorData", ctx, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCreatorData indicates an expected call of UpdateCreatorData.
func (mr *MockCreatorUsecaseMockRecorder) UpdateCreatorData(ctx, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCreatorData", reflect.TypeOf((*MockCreatorUsecase)(nil).UpdateCreatorData), ctx, updateData)
}

// UpdateProfilePhoto mocks base method.
func (m *MockCreatorUsecase) UpdateProfilePhoto(ctx context.Context, creatorId uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfilePhoto", ctx, creatorId)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfilePhoto indicates an expected call of UpdateProfilePhoto.
func (mr *MockCreatorUsecaseMockRecorder) UpdateProfilePhoto(ctx, creatorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfilePhoto", reflect.TypeOf((*MockCreatorUsecase)(nil).UpdateProfilePhoto), ctx, creatorId)
}

// MockCreatorRepo is a mock of CreatorRepo interface.
type MockCreatorRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorRepoMockRecorder
}

// MockCreatorRepoMockRecorder is the mock recorder for MockCreatorRepo.
type MockCreatorRepoMockRecorder struct {
	mock *MockCreatorRepo
}

// NewMockCreatorRepo creates a new mock instance.
func NewMockCreatorRepo(ctrl *gomock.Controller) *MockCreatorRepo {
	mock := &MockCreatorRepo{ctrl: ctrl}
	mock.recorder = &MockCreatorRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreatorRepo) EXPECT() *MockCreatorRepoMockRecorder {
	return m.recorder
}

// CheckIfCreator mocks base method.
func (m *MockCreatorRepo) CheckIfCreator(ctx context.Context, userID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfCreator", ctx, userID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfCreator indicates an expected call of CheckIfCreator.
func (mr *MockCreatorRepoMockRecorder) CheckIfCreator(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfCreator", reflect.TypeOf((*MockCreatorRepo)(nil).CheckIfCreator), ctx, userID)
}

// CreateAim mocks base method.
func (m *MockCreatorRepo) CreateAim(ctx context.Context, aimInfo models.Aim) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAim", ctx, aimInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAim indicates an expected call of CreateAim.
func (mr *MockCreatorRepoMockRecorder) CreateAim(ctx, aimInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAim", reflect.TypeOf((*MockCreatorRepo)(nil).CreateAim), ctx, aimInfo)
}

// CreatorNotificationInfo mocks base method.
func (m *MockCreatorRepo) CreatorNotificationInfo(ctx context.Context, creatorID uuid.UUID) (models.NotificationCreatorInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatorNotificationInfo", ctx, creatorID)
	ret0, _ := ret[0].(models.NotificationCreatorInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatorNotificationInfo indicates an expected call of CreatorNotificationInfo.
func (mr *MockCreatorRepoMockRecorder) CreatorNotificationInfo(ctx, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatorNotificationInfo", reflect.TypeOf((*MockCreatorRepo)(nil).CreatorNotificationInfo), ctx, creatorID)
}

// DeleteCoverPhoto mocks base method.
func (m *MockCreatorRepo) DeleteCoverPhoto(ctx context.Context, creatorId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoverPhoto", ctx, creatorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCoverPhoto indicates an expected call of DeleteCoverPhoto.
func (mr *MockCreatorRepoMockRecorder) DeleteCoverPhoto(ctx, creatorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoverPhoto", reflect.TypeOf((*MockCreatorRepo)(nil).DeleteCoverPhoto), ctx, creatorId)
}

// DeleteProfilePhoto mocks base method.
func (m *MockCreatorRepo) DeleteProfilePhoto(ctx context.Context, creatorId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfilePhoto", ctx, creatorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfilePhoto indicates an expected call of DeleteProfilePhoto.
func (mr *MockCreatorRepoMockRecorder) DeleteProfilePhoto(ctx, creatorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfilePhoto", reflect.TypeOf((*MockCreatorRepo)(nil).DeleteProfilePhoto), ctx, creatorId)
}

// FindCreators mocks base method.
func (m *MockCreatorRepo) FindCreators(ctx context.Context, keyword string) ([]models.Creator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCreators", ctx, keyword)
	ret0, _ := ret[0].([]models.Creator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCreators indicates an expected call of FindCreators.
func (mr *MockCreatorRepoMockRecorder) FindCreators(ctx, keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCreators", reflect.TypeOf((*MockCreatorRepo)(nil).FindCreators), ctx, keyword)
}

// GetAllCreators mocks base method.
func (m *MockCreatorRepo) GetAllCreators(ctx context.Context) ([]models.Creator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCreators", ctx)
	ret0, _ := ret[0].([]models.Creator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCreators indicates an expected call of GetAllCreators.
func (mr *MockCreatorRepoMockRecorder) GetAllCreators(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCreators", reflect.TypeOf((*MockCreatorRepo)(nil).GetAllCreators), ctx)
}

// GetCreatorBalance mocks base method.
func (m *MockCreatorRepo) GetCreatorBalance(ctx context.Context, creatorID uuid.UUID) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatorBalance", ctx, creatorID)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatorBalance indicates an expected call of GetCreatorBalance.
func (mr *MockCreatorRepoMockRecorder) GetCreatorBalance(ctx, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatorBalance", reflect.TypeOf((*MockCreatorRepo)(nil).GetCreatorBalance), ctx, creatorID)
}

// GetCreatorSubs mocks base method.
func (m *MockCreatorRepo) GetCreatorSubs(ctx context.Context, creatorID uuid.UUID) ([]models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatorSubs", ctx, creatorID)
	ret0, _ := ret[0].([]models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatorSubs indicates an expected call of GetCreatorSubs.
func (mr *MockCreatorRepoMockRecorder) GetCreatorSubs(ctx, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatorSubs", reflect.TypeOf((*MockCreatorRepo)(nil).GetCreatorSubs), ctx, creatorID)
}

// GetFeed mocks base method.
func (m *MockCreatorRepo) GetFeed(ctx context.Context, userID uuid.UUID) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", ctx, userID)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockCreatorRepoMockRecorder) GetFeed(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockCreatorRepo)(nil).GetFeed), ctx, userID)
}

// GetPage mocks base method.
func (m *MockCreatorRepo) GetPage(ctx context.Context, userID, creatorID uuid.UUID) (models.CreatorPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", ctx, userID, creatorID)
	ret0, _ := ret[0].(models.CreatorPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockCreatorRepoMockRecorder) GetPage(ctx, userID, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockCreatorRepo)(nil).GetPage), ctx, userID, creatorID)
}

// Statistics mocks base method.
func (m *MockCreatorRepo) Statistics(ctx context.Context, statsInput models.StatisticsDates) (models.Statistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics", ctx, statsInput)
	ret0, _ := ret[0].(models.Statistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics.
func (mr *MockCreatorRepoMockRecorder) Statistics(ctx, statsInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockCreatorRepo)(nil).Statistics), ctx, statsInput)
}

// StatisticsFirstDate mocks base method.
func (m *MockCreatorRepo) StatisticsFirstDate(ctx context.Context, creatorID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatisticsFirstDate", ctx, creatorID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatisticsFirstDate indicates an expected call of StatisticsFirstDate.
func (mr *MockCreatorRepoMockRecorder) StatisticsFirstDate(ctx, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatisticsFirstDate", reflect.TypeOf((*MockCreatorRepo)(nil).StatisticsFirstDate), ctx, creatorID)
}

// UpdateBalance mocks base method.
func (m *MockCreatorRepo) UpdateBalance(ctx context.Context, transfer models.CreatorTransfer) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, transfer)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockCreatorRepoMockRecorder) UpdateBalance(ctx, transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockCreatorRepo)(nil).UpdateBalance), ctx, transfer)
}

// UpdateCoverPhoto mocks base method.
func (m *MockCreatorRepo) UpdateCoverPhoto(ctx context.Context, creatorId, path uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoverPhoto", ctx, creatorId, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCoverPhoto indicates an expected call of UpdateCoverPhoto.
func (mr *MockCreatorRepoMockRecorder) UpdateCoverPhoto(ctx, creatorId, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoverPhoto", reflect.TypeOf((*MockCreatorRepo)(nil).UpdateCoverPhoto), ctx, creatorId, path)
}

// UpdateCreatorData mocks base method.
func (m *MockCreatorRepo) UpdateCreatorData(ctx context.Context, updateData models.UpdateCreatorInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCreatorData", ctx, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCreatorData indicates an expected call of UpdateCreatorData.
func (mr *MockCreatorRepoMockRecorder) UpdateCreatorData(ctx, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCreatorData", reflect.TypeOf((*MockCreatorRepo)(nil).UpdateCreatorData), ctx, updateData)
}

// UpdateProfilePhoto mocks base method.
func (m *MockCreatorRepo) UpdateProfilePhoto(ctx context.Context, creatorId, path uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfilePhoto", ctx, creatorId, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfilePhoto indicates an expected call of UpdateProfilePhoto.
func (mr *MockCreatorRepoMockRecorder) UpdateProfilePhoto(ctx, creatorId, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfilePhoto", reflect.TypeOf((*MockCreatorRepo)(nil).UpdateProfilePhoto), ctx, creatorId, path)
}
