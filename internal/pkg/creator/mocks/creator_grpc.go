// Code generated by MockGen. DO NOT EDIT.
// Source: ./generated/creator_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	proto "github.com/go-park-mail-ru/2023_1_4from5/internal/models/proto"
	generated "github.com/go-park-mail-ru/2023_1_4from5/internal/pkg/creator/delivery/grpc/generated"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCreatorServiceClient is a mock of CreatorServiceClient interface.
type MockCreatorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorServiceClientMockRecorder
}

// MockCreatorServiceClientMockRecorder is the mock recorder for MockCreatorServiceClient.
type MockCreatorServiceClientMockRecorder struct {
	mock *MockCreatorServiceClient
}

// NewMockCreatorServiceClient creates a new mock instance.
func NewMockCreatorServiceClient(ctrl *gomock.Controller) *MockCreatorServiceClient {
	mock := &MockCreatorServiceClient{ctrl: ctrl}
	mock.recorder = &MockCreatorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreatorServiceClient) EXPECT() *MockCreatorServiceClientMockRecorder {
	return m.recorder
}

// AddAttach mocks base method.
func (m *MockCreatorServiceClient) AddAttach(ctx context.Context, in *generated.PostAttachMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAttach", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAttach indicates an expected call of AddAttach.
func (mr *MockCreatorServiceClientMockRecorder) AddAttach(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttach", reflect.TypeOf((*MockCreatorServiceClient)(nil).AddAttach), varargs...)
}

// AddLike mocks base method.
func (m *MockCreatorServiceClient) AddLike(ctx context.Context, in *generated.PostUserMessage, opts ...grpc.CallOption) (*generated.Like, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLike", varargs...)
	ret0, _ := ret[0].(*generated.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLike indicates an expected call of AddLike.
func (mr *MockCreatorServiceClientMockRecorder) AddLike(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLike", reflect.TypeOf((*MockCreatorServiceClient)(nil).AddLike), varargs...)
}

// AddLikeComment mocks base method.
func (m *MockCreatorServiceClient) AddLikeComment(ctx context.Context, in *generated.Comment, opts ...grpc.CallOption) (*generated.Like, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLikeComment", varargs...)
	ret0, _ := ret[0].(*generated.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLikeComment indicates an expected call of AddLikeComment.
func (mr *MockCreatorServiceClientMockRecorder) AddLikeComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLikeComment", reflect.TypeOf((*MockCreatorServiceClient)(nil).AddLikeComment), varargs...)
}

// CheckIfCreator mocks base method.
func (m *MockCreatorServiceClient) CheckIfCreator(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.UUIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckIfCreator", varargs...)
	ret0, _ := ret[0].(*proto.UUIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfCreator indicates an expected call of CheckIfCreator.
func (mr *MockCreatorServiceClientMockRecorder) CheckIfCreator(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfCreator", reflect.TypeOf((*MockCreatorServiceClient)(nil).CheckIfCreator), varargs...)
}

// CreateAim mocks base method.
func (m *MockCreatorServiceClient) CreateAim(ctx context.Context, in *generated.Aim, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAim", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAim indicates an expected call of CreateAim.
func (mr *MockCreatorServiceClientMockRecorder) CreateAim(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAim", reflect.TypeOf((*MockCreatorServiceClient)(nil).CreateAim), varargs...)
}

// CreateComment mocks base method.
func (m *MockCreatorServiceClient) CreateComment(ctx context.Context, in *generated.Comment, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateComment", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCreatorServiceClientMockRecorder) CreateComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCreatorServiceClient)(nil).CreateComment), varargs...)
}

// CreatePost mocks base method.
func (m *MockCreatorServiceClient) CreatePost(ctx context.Context, in *generated.PostCreationData, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePost", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockCreatorServiceClientMockRecorder) CreatePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockCreatorServiceClient)(nil).CreatePost), varargs...)
}

// CreateSubscription mocks base method.
func (m *MockCreatorServiceClient) CreateSubscription(ctx context.Context, in *proto.Subscription, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubscription", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockCreatorServiceClientMockRecorder) CreateSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockCreatorServiceClient)(nil).CreateSubscription), varargs...)
}

// CreatorNotificationInfo mocks base method.
func (m *MockCreatorServiceClient) CreatorNotificationInfo(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*generated.NotificationCreatorInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatorNotificationInfo", varargs...)
	ret0, _ := ret[0].(*generated.NotificationCreatorInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatorNotificationInfo indicates an expected call of CreatorNotificationInfo.
func (mr *MockCreatorServiceClientMockRecorder) CreatorNotificationInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatorNotificationInfo", reflect.TypeOf((*MockCreatorServiceClient)(nil).CreatorNotificationInfo), varargs...)
}

// DeleteAttachment mocks base method.
func (m *MockCreatorServiceClient) DeleteAttachment(ctx context.Context, in *generated.PostAttachMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAttachment", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttachment indicates an expected call of DeleteAttachment.
func (mr *MockCreatorServiceClientMockRecorder) DeleteAttachment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachment", reflect.TypeOf((*MockCreatorServiceClient)(nil).DeleteAttachment), varargs...)
}

// DeleteAttachmentsByPostID mocks base method.
func (m *MockCreatorServiceClient) DeleteAttachmentsByPostID(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAttachmentsByPostID", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttachmentsByPostID indicates an expected call of DeleteAttachmentsByPostID.
func (mr *MockCreatorServiceClientMockRecorder) DeleteAttachmentsByPostID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachmentsByPostID", reflect.TypeOf((*MockCreatorServiceClient)(nil).DeleteAttachmentsByPostID), varargs...)
}

// DeleteAttachmentsFiles mocks base method.
func (m *MockCreatorServiceClient) DeleteAttachmentsFiles(ctx context.Context, in *generated.Attachments, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAttachmentsFiles", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttachmentsFiles indicates an expected call of DeleteAttachmentsFiles.
func (mr *MockCreatorServiceClientMockRecorder) DeleteAttachmentsFiles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachmentsFiles", reflect.TypeOf((*MockCreatorServiceClient)(nil).DeleteAttachmentsFiles), varargs...)
}

// DeleteComment mocks base method.
func (m *MockCreatorServiceClient) DeleteComment(ctx context.Context, in *generated.Comment, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteComment", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCreatorServiceClientMockRecorder) DeleteComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCreatorServiceClient)(nil).DeleteComment), varargs...)
}

// DeleteCoverPhoto mocks base method.
func (m *MockCreatorServiceClient) DeleteCoverPhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCoverPhoto", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCoverPhoto indicates an expected call of DeleteCoverPhoto.
func (mr *MockCreatorServiceClientMockRecorder) DeleteCoverPhoto(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoverPhoto", reflect.TypeOf((*MockCreatorServiceClient)(nil).DeleteCoverPhoto), varargs...)
}

// DeletePost mocks base method.
func (m *MockCreatorServiceClient) DeletePost(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePost", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockCreatorServiceClientMockRecorder) DeletePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockCreatorServiceClient)(nil).DeletePost), varargs...)
}

// DeleteProfilePhoto mocks base method.
func (m *MockCreatorServiceClient) DeleteProfilePhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProfilePhoto", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfilePhoto indicates an expected call of DeleteProfilePhoto.
func (mr *MockCreatorServiceClientMockRecorder) DeleteProfilePhoto(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfilePhoto", reflect.TypeOf((*MockCreatorServiceClient)(nil).DeleteProfilePhoto), varargs...)
}

// DeleteSubscription mocks base method.
func (m *MockCreatorServiceClient) DeleteSubscription(ctx context.Context, in *generated.SubscriptionCreatorMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubscription", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockCreatorServiceClientMockRecorder) DeleteSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockCreatorServiceClient)(nil).DeleteSubscription), varargs...)
}

// EditComment mocks base method.
func (m *MockCreatorServiceClient) EditComment(ctx context.Context, in *generated.Comment, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditComment", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditComment indicates an expected call of EditComment.
func (mr *MockCreatorServiceClientMockRecorder) EditComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockCreatorServiceClient)(nil).EditComment), varargs...)
}

// EditPost mocks base method.
func (m *MockCreatorServiceClient) EditPost(ctx context.Context, in *generated.PostEditData, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditPost", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditPost indicates an expected call of EditPost.
func (mr *MockCreatorServiceClientMockRecorder) EditPost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPost", reflect.TypeOf((*MockCreatorServiceClient)(nil).EditPost), varargs...)
}

// EditSubscription mocks base method.
func (m *MockCreatorServiceClient) EditSubscription(ctx context.Context, in *proto.Subscription, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditSubscription", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditSubscription indicates an expected call of EditSubscription.
func (mr *MockCreatorServiceClientMockRecorder) EditSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditSubscription", reflect.TypeOf((*MockCreatorServiceClient)(nil).EditSubscription), varargs...)
}

// FindCreators mocks base method.
func (m *MockCreatorServiceClient) FindCreators(ctx context.Context, in *generated.KeywordMessage, opts ...grpc.CallOption) (*generated.CreatorsMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindCreators", varargs...)
	ret0, _ := ret[0].(*generated.CreatorsMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCreators indicates an expected call of FindCreators.
func (mr *MockCreatorServiceClientMockRecorder) FindCreators(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCreators", reflect.TypeOf((*MockCreatorServiceClient)(nil).FindCreators), varargs...)
}

// GetAllCreators mocks base method.
func (m *MockCreatorServiceClient) GetAllCreators(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*generated.CreatorsMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllCreators", varargs...)
	ret0, _ := ret[0].(*generated.CreatorsMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCreators indicates an expected call of GetAllCreators.
func (mr *MockCreatorServiceClientMockRecorder) GetAllCreators(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCreators", reflect.TypeOf((*MockCreatorServiceClient)(nil).GetAllCreators), varargs...)
}

// GetCreatorBalance mocks base method.
func (m *MockCreatorServiceClient) GetCreatorBalance(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*generated.CreatorBalance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCreatorBalance", varargs...)
	ret0, _ := ret[0].(*generated.CreatorBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatorBalance indicates an expected call of GetCreatorBalance.
func (mr *MockCreatorServiceClientMockRecorder) GetCreatorBalance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatorBalance", reflect.TypeOf((*MockCreatorServiceClient)(nil).GetCreatorBalance), varargs...)
}

// GetFeed mocks base method.
func (m *MockCreatorServiceClient) GetFeed(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*generated.PostsMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeed", varargs...)
	ret0, _ := ret[0].(*generated.PostsMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockCreatorServiceClientMockRecorder) GetFeed(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockCreatorServiceClient)(nil).GetFeed), varargs...)
}

// GetFileExtension mocks base method.
func (m *MockCreatorServiceClient) GetFileExtension(ctx context.Context, in *generated.KeywordMessage, opts ...grpc.CallOption) (*generated.Extension, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFileExtension", varargs...)
	ret0, _ := ret[0].(*generated.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileExtension indicates an expected call of GetFileExtension.
func (mr *MockCreatorServiceClientMockRecorder) GetFileExtension(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileExtension", reflect.TypeOf((*MockCreatorServiceClient)(nil).GetFileExtension), varargs...)
}

// GetPage mocks base method.
func (m *MockCreatorServiceClient) GetPage(ctx context.Context, in *generated.UserCreatorMessage, opts ...grpc.CallOption) (*generated.CreatorPage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPage", varargs...)
	ret0, _ := ret[0].(*generated.CreatorPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockCreatorServiceClientMockRecorder) GetPage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockCreatorServiceClient)(nil).GetPage), varargs...)
}

// GetPost mocks base method.
func (m *MockCreatorServiceClient) GetPost(ctx context.Context, in *generated.PostUserMessage, opts ...grpc.CallOption) (*generated.PostWithComments, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPost", varargs...)
	ret0, _ := ret[0].(*generated.PostWithComments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockCreatorServiceClientMockRecorder) GetPost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockCreatorServiceClient)(nil).GetPost), varargs...)
}

// IsCommentOwner mocks base method.
func (m *MockCreatorServiceClient) IsCommentOwner(ctx context.Context, in *generated.Comment, opts ...grpc.CallOption) (*generated.FlagMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsCommentOwner", varargs...)
	ret0, _ := ret[0].(*generated.FlagMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCommentOwner indicates an expected call of IsCommentOwner.
func (mr *MockCreatorServiceClientMockRecorder) IsCommentOwner(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCommentOwner", reflect.TypeOf((*MockCreatorServiceClient)(nil).IsCommentOwner), varargs...)
}

// IsCreator mocks base method.
func (m *MockCreatorServiceClient) IsCreator(ctx context.Context, in *generated.UserCreatorMessage, opts ...grpc.CallOption) (*generated.FlagMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsCreator", varargs...)
	ret0, _ := ret[0].(*generated.FlagMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCreator indicates an expected call of IsCreator.
func (mr *MockCreatorServiceClientMockRecorder) IsCreator(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCreator", reflect.TypeOf((*MockCreatorServiceClient)(nil).IsCreator), varargs...)
}

// IsPostAvailable mocks base method.
func (m *MockCreatorServiceClient) IsPostAvailable(ctx context.Context, in *generated.PostUserMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsPostAvailable", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPostAvailable indicates an expected call of IsPostAvailable.
func (mr *MockCreatorServiceClientMockRecorder) IsPostAvailable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPostAvailable", reflect.TypeOf((*MockCreatorServiceClient)(nil).IsPostAvailable), varargs...)
}

// IsPostOwner mocks base method.
func (m *MockCreatorServiceClient) IsPostOwner(ctx context.Context, in *generated.PostUserMessage, opts ...grpc.CallOption) (*generated.FlagMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsPostOwner", varargs...)
	ret0, _ := ret[0].(*generated.FlagMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPostOwner indicates an expected call of IsPostOwner.
func (mr *MockCreatorServiceClientMockRecorder) IsPostOwner(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPostOwner", reflect.TypeOf((*MockCreatorServiceClient)(nil).IsPostOwner), varargs...)
}

// RemoveLike mocks base method.
func (m *MockCreatorServiceClient) RemoveLike(ctx context.Context, in *generated.PostUserMessage, opts ...grpc.CallOption) (*generated.Like, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveLike", varargs...)
	ret0, _ := ret[0].(*generated.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLike indicates an expected call of RemoveLike.
func (mr *MockCreatorServiceClientMockRecorder) RemoveLike(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLike", reflect.TypeOf((*MockCreatorServiceClient)(nil).RemoveLike), varargs...)
}

// RemoveLikeComment mocks base method.
func (m *MockCreatorServiceClient) RemoveLikeComment(ctx context.Context, in *generated.Comment, opts ...grpc.CallOption) (*generated.Like, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveLikeComment", varargs...)
	ret0, _ := ret[0].(*generated.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLikeComment indicates an expected call of RemoveLikeComment.
func (mr *MockCreatorServiceClientMockRecorder) RemoveLikeComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLikeComment", reflect.TypeOf((*MockCreatorServiceClient)(nil).RemoveLikeComment), varargs...)
}

// Statistics mocks base method.
func (m *MockCreatorServiceClient) Statistics(ctx context.Context, in *generated.StatisticsInput, opts ...grpc.CallOption) (*generated.Stat, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Statistics", varargs...)
	ret0, _ := ret[0].(*generated.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics.
func (mr *MockCreatorServiceClientMockRecorder) Statistics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockCreatorServiceClient)(nil).Statistics), varargs...)
}

// StatisticsFirstDate mocks base method.
func (m *MockCreatorServiceClient) StatisticsFirstDate(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*generated.FirstDate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StatisticsFirstDate", varargs...)
	ret0, _ := ret[0].(*generated.FirstDate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatisticsFirstDate indicates an expected call of StatisticsFirstDate.
func (mr *MockCreatorServiceClientMockRecorder) StatisticsFirstDate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatisticsFirstDate", reflect.TypeOf((*MockCreatorServiceClient)(nil).StatisticsFirstDate), varargs...)
}

// UpdateBalance mocks base method.
func (m *MockCreatorServiceClient) UpdateBalance(ctx context.Context, in *generated.CreatorTransfer, opts ...grpc.CallOption) (*generated.CreatorBalance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBalance", varargs...)
	ret0, _ := ret[0].(*generated.CreatorBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockCreatorServiceClientMockRecorder) UpdateBalance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockCreatorServiceClient)(nil).UpdateBalance), varargs...)
}

// UpdateCoverPhoto mocks base method.
func (m *MockCreatorServiceClient) UpdateCoverPhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.UUIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCoverPhoto", varargs...)
	ret0, _ := ret[0].(*proto.UUIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCoverPhoto indicates an expected call of UpdateCoverPhoto.
func (mr *MockCreatorServiceClientMockRecorder) UpdateCoverPhoto(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoverPhoto", reflect.TypeOf((*MockCreatorServiceClient)(nil).UpdateCoverPhoto), varargs...)
}

// UpdateCreatorData mocks base method.
func (m *MockCreatorServiceClient) UpdateCreatorData(ctx context.Context, in *generated.UpdateCreatorInfo, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCreatorData", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCreatorData indicates an expected call of UpdateCreatorData.
func (mr *MockCreatorServiceClientMockRecorder) UpdateCreatorData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCreatorData", reflect.TypeOf((*MockCreatorServiceClient)(nil).UpdateCreatorData), varargs...)
}

// UpdateProfilePhoto mocks base method.
func (m *MockCreatorServiceClient) UpdateProfilePhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.UUIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfilePhoto", varargs...)
	ret0, _ := ret[0].(*proto.UUIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfilePhoto indicates an expected call of UpdateProfilePhoto.
func (mr *MockCreatorServiceClientMockRecorder) UpdateProfilePhoto(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfilePhoto", reflect.TypeOf((*MockCreatorServiceClient)(nil).UpdateProfilePhoto), varargs...)
}

// MockCreatorServiceServer is a mock of CreatorServiceServer interface.
type MockCreatorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorServiceServerMockRecorder
}

// MockCreatorServiceServerMockRecorder is the mock recorder for MockCreatorServiceServer.
type MockCreatorServiceServerMockRecorder struct {
	mock *MockCreatorServiceServer
}

// NewMockCreatorServiceServer creates a new mock instance.
func NewMockCreatorServiceServer(ctrl *gomock.Controller) *MockCreatorServiceServer {
	mock := &MockCreatorServiceServer{ctrl: ctrl}
	mock.recorder = &MockCreatorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreatorServiceServer) EXPECT() *MockCreatorServiceServerMockRecorder {
	return m.recorder
}

// AddAttach mocks base method.
func (m *MockCreatorServiceServer) AddAttach(arg0 context.Context, arg1 *generated.PostAttachMessage) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAttach", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAttach indicates an expected call of AddAttach.
func (mr *MockCreatorServiceServerMockRecorder) AddAttach(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttach", reflect.TypeOf((*MockCreatorServiceServer)(nil).AddAttach), arg0, arg1)
}

// AddLike mocks base method.
func (m *MockCreatorServiceServer) AddLike(arg0 context.Context, arg1 *generated.PostUserMessage) (*generated.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLike", arg0, arg1)
	ret0, _ := ret[0].(*generated.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLike indicates an expected call of AddLike.
func (mr *MockCreatorServiceServerMockRecorder) AddLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLike", reflect.TypeOf((*MockCreatorServiceServer)(nil).AddLike), arg0, arg1)
}

// AddLikeComment mocks base method.
func (m *MockCreatorServiceServer) AddLikeComment(arg0 context.Context, arg1 *generated.Comment) (*generated.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLikeComment", arg0, arg1)
	ret0, _ := ret[0].(*generated.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLikeComment indicates an expected call of AddLikeComment.
func (mr *MockCreatorServiceServerMockRecorder) AddLikeComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLikeComment", reflect.TypeOf((*MockCreatorServiceServer)(nil).AddLikeComment), arg0, arg1)
}

// CheckIfCreator mocks base method.
func (m *MockCreatorServiceServer) CheckIfCreator(arg0 context.Context, arg1 *proto.UUIDMessage) (*proto.UUIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfCreator", arg0, arg1)
	ret0, _ := ret[0].(*proto.UUIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfCreator indicates an expected call of CheckIfCreator.
func (mr *MockCreatorServiceServerMockRecorder) CheckIfCreator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfCreator", reflect.TypeOf((*MockCreatorServiceServer)(nil).CheckIfCreator), arg0, arg1)
}

// CreateAim mocks base method.
func (m *MockCreatorServiceServer) CreateAim(arg0 context.Context, arg1 *generated.Aim) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAim", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAim indicates an expected call of CreateAim.
func (mr *MockCreatorServiceServerMockRecorder) CreateAim(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAim", reflect.TypeOf((*MockCreatorServiceServer)(nil).CreateAim), arg0, arg1)
}

// CreateComment mocks base method.
func (m *MockCreatorServiceServer) CreateComment(arg0 context.Context, arg1 *generated.Comment) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCreatorServiceServerMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCreatorServiceServer)(nil).CreateComment), arg0, arg1)
}

// CreatePost mocks base method.
func (m *MockCreatorServiceServer) CreatePost(arg0 context.Context, arg1 *generated.PostCreationData) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockCreatorServiceServerMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockCreatorServiceServer)(nil).CreatePost), arg0, arg1)
}

// CreateSubscription mocks base method.
func (m *MockCreatorServiceServer) CreateSubscription(arg0 context.Context, arg1 *proto.Subscription) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockCreatorServiceServerMockRecorder) CreateSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockCreatorServiceServer)(nil).CreateSubscription), arg0, arg1)
}

// CreatorNotificationInfo mocks base method.
func (m *MockCreatorServiceServer) CreatorNotificationInfo(arg0 context.Context, arg1 *proto.UUIDMessage) (*generated.NotificationCreatorInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatorNotificationInfo", arg0, arg1)
	ret0, _ := ret[0].(*generated.NotificationCreatorInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatorNotificationInfo indicates an expected call of CreatorNotificationInfo.
func (mr *MockCreatorServiceServerMockRecorder) CreatorNotificationInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatorNotificationInfo", reflect.TypeOf((*MockCreatorServiceServer)(nil).CreatorNotificationInfo), arg0, arg1)
}

// DeleteAttachment mocks base method.
func (m *MockCreatorServiceServer) DeleteAttachment(arg0 context.Context, arg1 *generated.PostAttachMessage) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachment", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttachment indicates an expected call of DeleteAttachment.
func (mr *MockCreatorServiceServerMockRecorder) DeleteAttachment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachment", reflect.TypeOf((*MockCreatorServiceServer)(nil).DeleteAttachment), arg0, arg1)
}

// DeleteAttachmentsByPostID mocks base method.
func (m *MockCreatorServiceServer) DeleteAttachmentsByPostID(arg0 context.Context, arg1 *proto.UUIDMessage) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachmentsByPostID", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttachmentsByPostID indicates an expected call of DeleteAttachmentsByPostID.
func (mr *MockCreatorServiceServerMockRecorder) DeleteAttachmentsByPostID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachmentsByPostID", reflect.TypeOf((*MockCreatorServiceServer)(nil).DeleteAttachmentsByPostID), arg0, arg1)
}

// DeleteAttachmentsFiles mocks base method.
func (m *MockCreatorServiceServer) DeleteAttachmentsFiles(arg0 context.Context, arg1 *generated.Attachments) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachmentsFiles", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttachmentsFiles indicates an expected call of DeleteAttachmentsFiles.
func (mr *MockCreatorServiceServerMockRecorder) DeleteAttachmentsFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachmentsFiles", reflect.TypeOf((*MockCreatorServiceServer)(nil).DeleteAttachmentsFiles), arg0, arg1)
}

// DeleteComment mocks base method.
func (m *MockCreatorServiceServer) DeleteComment(arg0 context.Context, arg1 *generated.Comment) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCreatorServiceServerMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCreatorServiceServer)(nil).DeleteComment), arg0, arg1)
}

// DeleteCoverPhoto mocks base method.
func (m *MockCreatorServiceServer) DeleteCoverPhoto(arg0 context.Context, arg1 *proto.UUIDMessage) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoverPhoto", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCoverPhoto indicates an expected call of DeleteCoverPhoto.
func (mr *MockCreatorServiceServerMockRecorder) DeleteCoverPhoto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoverPhoto", reflect.TypeOf((*MockCreatorServiceServer)(nil).DeleteCoverPhoto), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockCreatorServiceServer) DeletePost(arg0 context.Context, arg1 *proto.UUIDMessage) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockCreatorServiceServerMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockCreatorServiceServer)(nil).DeletePost), arg0, arg1)
}

// DeleteProfilePhoto mocks base method.
func (m *MockCreatorServiceServer) DeleteProfilePhoto(arg0 context.Context, arg1 *proto.UUIDMessage) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfilePhoto", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfilePhoto indicates an expected call of DeleteProfilePhoto.
func (mr *MockCreatorServiceServerMockRecorder) DeleteProfilePhoto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfilePhoto", reflect.TypeOf((*MockCreatorServiceServer)(nil).DeleteProfilePhoto), arg0, arg1)
}

// DeleteSubscription mocks base method.
func (m *MockCreatorServiceServer) DeleteSubscription(arg0 context.Context, arg1 *generated.SubscriptionCreatorMessage) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockCreatorServiceServerMockRecorder) DeleteSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockCreatorServiceServer)(nil).DeleteSubscription), arg0, arg1)
}

// EditComment mocks base method.
func (m *MockCreatorServiceServer) EditComment(arg0 context.Context, arg1 *generated.Comment) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditComment indicates an expected call of EditComment.
func (mr *MockCreatorServiceServerMockRecorder) EditComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockCreatorServiceServer)(nil).EditComment), arg0, arg1)
}

// EditPost mocks base method.
func (m *MockCreatorServiceServer) EditPost(arg0 context.Context, arg1 *generated.PostEditData) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPost", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditPost indicates an expected call of EditPost.
func (mr *MockCreatorServiceServerMockRecorder) EditPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPost", reflect.TypeOf((*MockCreatorServiceServer)(nil).EditPost), arg0, arg1)
}

// EditSubscription mocks base method.
func (m *MockCreatorServiceServer) EditSubscription(arg0 context.Context, arg1 *proto.Subscription) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditSubscription", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditSubscription indicates an expected call of EditSubscription.
func (mr *MockCreatorServiceServerMockRecorder) EditSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditSubscription", reflect.TypeOf((*MockCreatorServiceServer)(nil).EditSubscription), arg0, arg1)
}

// FindCreators mocks base method.
func (m *MockCreatorServiceServer) FindCreators(arg0 context.Context, arg1 *generated.KeywordMessage) (*generated.CreatorsMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCreators", arg0, arg1)
	ret0, _ := ret[0].(*generated.CreatorsMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCreators indicates an expected call of FindCreators.
func (mr *MockCreatorServiceServerMockRecorder) FindCreators(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCreators", reflect.TypeOf((*MockCreatorServiceServer)(nil).FindCreators), arg0, arg1)
}

// GetAllCreators mocks base method.
func (m *MockCreatorServiceServer) GetAllCreators(arg0 context.Context, arg1 *proto.Empty) (*generated.CreatorsMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCreators", arg0, arg1)
	ret0, _ := ret[0].(*generated.CreatorsMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCreators indicates an expected call of GetAllCreators.
func (mr *MockCreatorServiceServerMockRecorder) GetAllCreators(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCreators", reflect.TypeOf((*MockCreatorServiceServer)(nil).GetAllCreators), arg0, arg1)
}

// GetCreatorBalance mocks base method.
func (m *MockCreatorServiceServer) GetCreatorBalance(arg0 context.Context, arg1 *proto.UUIDMessage) (*generated.CreatorBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatorBalance", arg0, arg1)
	ret0, _ := ret[0].(*generated.CreatorBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatorBalance indicates an expected call of GetCreatorBalance.
func (mr *MockCreatorServiceServerMockRecorder) GetCreatorBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatorBalance", reflect.TypeOf((*MockCreatorServiceServer)(nil).GetCreatorBalance), arg0, arg1)
}

// GetFeed mocks base method.
func (m *MockCreatorServiceServer) GetFeed(arg0 context.Context, arg1 *proto.UUIDMessage) (*generated.PostsMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", arg0, arg1)
	ret0, _ := ret[0].(*generated.PostsMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockCreatorServiceServerMockRecorder) GetFeed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockCreatorServiceServer)(nil).GetFeed), arg0, arg1)
}

// GetFileExtension mocks base method.
func (m *MockCreatorServiceServer) GetFileExtension(arg0 context.Context, arg1 *generated.KeywordMessage) (*generated.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileExtension", arg0, arg1)
	ret0, _ := ret[0].(*generated.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileExtension indicates an expected call of GetFileExtension.
func (mr *MockCreatorServiceServerMockRecorder) GetFileExtension(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileExtension", reflect.TypeOf((*MockCreatorServiceServer)(nil).GetFileExtension), arg0, arg1)
}

// GetPage mocks base method.
func (m *MockCreatorServiceServer) GetPage(arg0 context.Context, arg1 *generated.UserCreatorMessage) (*generated.CreatorPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", arg0, arg1)
	ret0, _ := ret[0].(*generated.CreatorPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockCreatorServiceServerMockRecorder) GetPage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockCreatorServiceServer)(nil).GetPage), arg0, arg1)
}

// GetPost mocks base method.
func (m *MockCreatorServiceServer) GetPost(arg0 context.Context, arg1 *generated.PostUserMessage) (*generated.PostWithComments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1)
	ret0, _ := ret[0].(*generated.PostWithComments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockCreatorServiceServerMockRecorder) GetPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockCreatorServiceServer)(nil).GetPost), arg0, arg1)
}

// IsCommentOwner mocks base method.
func (m *MockCreatorServiceServer) IsCommentOwner(arg0 context.Context, arg1 *generated.Comment) (*generated.FlagMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCommentOwner", arg0, arg1)
	ret0, _ := ret[0].(*generated.FlagMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCommentOwner indicates an expected call of IsCommentOwner.
func (mr *MockCreatorServiceServerMockRecorder) IsCommentOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCommentOwner", reflect.TypeOf((*MockCreatorServiceServer)(nil).IsCommentOwner), arg0, arg1)
}

// IsCreator mocks base method.
func (m *MockCreatorServiceServer) IsCreator(arg0 context.Context, arg1 *generated.UserCreatorMessage) (*generated.FlagMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCreator", arg0, arg1)
	ret0, _ := ret[0].(*generated.FlagMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCreator indicates an expected call of IsCreator.
func (mr *MockCreatorServiceServerMockRecorder) IsCreator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCreator", reflect.TypeOf((*MockCreatorServiceServer)(nil).IsCreator), arg0, arg1)
}

// IsPostAvailable mocks base method.
func (m *MockCreatorServiceServer) IsPostAvailable(arg0 context.Context, arg1 *generated.PostUserMessage) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPostAvailable", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPostAvailable indicates an expected call of IsPostAvailable.
func (mr *MockCreatorServiceServerMockRecorder) IsPostAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPostAvailable", reflect.TypeOf((*MockCreatorServiceServer)(nil).IsPostAvailable), arg0, arg1)
}

// IsPostOwner mocks base method.
func (m *MockCreatorServiceServer) IsPostOwner(arg0 context.Context, arg1 *generated.PostUserMessage) (*generated.FlagMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPostOwner", arg0, arg1)
	ret0, _ := ret[0].(*generated.FlagMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPostOwner indicates an expected call of IsPostOwner.
func (mr *MockCreatorServiceServerMockRecorder) IsPostOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPostOwner", reflect.TypeOf((*MockCreatorServiceServer)(nil).IsPostOwner), arg0, arg1)
}

// RemoveLike mocks base method.
func (m *MockCreatorServiceServer) RemoveLike(arg0 context.Context, arg1 *generated.PostUserMessage) (*generated.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLike", arg0, arg1)
	ret0, _ := ret[0].(*generated.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLike indicates an expected call of RemoveLike.
func (mr *MockCreatorServiceServerMockRecorder) RemoveLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLike", reflect.TypeOf((*MockCreatorServiceServer)(nil).RemoveLike), arg0, arg1)
}

// RemoveLikeComment mocks base method.
func (m *MockCreatorServiceServer) RemoveLikeComment(arg0 context.Context, arg1 *generated.Comment) (*generated.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLikeComment", arg0, arg1)
	ret0, _ := ret[0].(*generated.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLikeComment indicates an expected call of RemoveLikeComment.
func (mr *MockCreatorServiceServerMockRecorder) RemoveLikeComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLikeComment", reflect.TypeOf((*MockCreatorServiceServer)(nil).RemoveLikeComment), arg0, arg1)
}

// Statistics mocks base method.
func (m *MockCreatorServiceServer) Statistics(arg0 context.Context, arg1 *generated.StatisticsInput) (*generated.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics", arg0, arg1)
	ret0, _ := ret[0].(*generated.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics.
func (mr *MockCreatorServiceServerMockRecorder) Statistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockCreatorServiceServer)(nil).Statistics), arg0, arg1)
}

// StatisticsFirstDate mocks base method.
func (m *MockCreatorServiceServer) StatisticsFirstDate(arg0 context.Context, arg1 *proto.UUIDMessage) (*generated.FirstDate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatisticsFirstDate", arg0, arg1)
	ret0, _ := ret[0].(*generated.FirstDate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatisticsFirstDate indicates an expected call of StatisticsFirstDate.
func (mr *MockCreatorServiceServerMockRecorder) StatisticsFirstDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatisticsFirstDate", reflect.TypeOf((*MockCreatorServiceServer)(nil).StatisticsFirstDate), arg0, arg1)
}

// UpdateBalance mocks base method.
func (m *MockCreatorServiceServer) UpdateBalance(arg0 context.Context, arg1 *generated.CreatorTransfer) (*generated.CreatorBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", arg0, arg1)
	ret0, _ := ret[0].(*generated.CreatorBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockCreatorServiceServerMockRecorder) UpdateBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockCreatorServiceServer)(nil).UpdateBalance), arg0, arg1)
}

// UpdateCoverPhoto mocks base method.
func (m *MockCreatorServiceServer) UpdateCoverPhoto(arg0 context.Context, arg1 *proto.UUIDMessage) (*proto.UUIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoverPhoto", arg0, arg1)
	ret0, _ := ret[0].(*proto.UUIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCoverPhoto indicates an expected call of UpdateCoverPhoto.
func (mr *MockCreatorServiceServerMockRecorder) UpdateCoverPhoto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoverPhoto", reflect.TypeOf((*MockCreatorServiceServer)(nil).UpdateCoverPhoto), arg0, arg1)
}

// UpdateCreatorData mocks base method.
func (m *MockCreatorServiceServer) UpdateCreatorData(arg0 context.Context, arg1 *generated.UpdateCreatorInfo) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCreatorData", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCreatorData indicates an expected call of UpdateCreatorData.
func (mr *MockCreatorServiceServerMockRecorder) UpdateCreatorData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCreatorData", reflect.TypeOf((*MockCreatorServiceServer)(nil).UpdateCreatorData), arg0, arg1)
}

// UpdateProfilePhoto mocks base method.
func (m *MockCreatorServiceServer) UpdateProfilePhoto(arg0 context.Context, arg1 *proto.UUIDMessage) (*proto.UUIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfilePhoto", arg0, arg1)
	ret0, _ := ret[0].(*proto.UUIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfilePhoto indicates an expected call of UpdateProfilePhoto.
func (mr *MockCreatorServiceServerMockRecorder) UpdateProfilePhoto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfilePhoto", reflect.TypeOf((*MockCreatorServiceServer)(nil).UpdateProfilePhoto), arg0, arg1)
}

// mustEmbedUnimplementedCreatorServiceServer mocks base method.
func (m *MockCreatorServiceServer) mustEmbedUnimplementedCreatorServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCreatorServiceServer")
}

// mustEmbedUnimplementedCreatorServiceServer indicates an expected call of mustEmbedUnimplementedCreatorServiceServer.
func (mr *MockCreatorServiceServerMockRecorder) mustEmbedUnimplementedCreatorServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCreatorServiceServer", reflect.TypeOf((*MockCreatorServiceServer)(nil).mustEmbedUnimplementedCreatorServiceServer))
}

// MockUnsafeCreatorServiceServer is a mock of UnsafeCreatorServiceServer interface.
type MockUnsafeCreatorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCreatorServiceServerMockRecorder
}

// MockUnsafeCreatorServiceServerMockRecorder is the mock recorder for MockUnsafeCreatorServiceServer.
type MockUnsafeCreatorServiceServerMockRecorder struct {
	mock *MockUnsafeCreatorServiceServer
}

// NewMockUnsafeCreatorServiceServer creates a new mock instance.
func NewMockUnsafeCreatorServiceServer(ctrl *gomock.Controller) *MockUnsafeCreatorServiceServer {
	mock := &MockUnsafeCreatorServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCreatorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCreatorServiceServer) EXPECT() *MockUnsafeCreatorServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCreatorServiceServer mocks base method.
func (m *MockUnsafeCreatorServiceServer) mustEmbedUnimplementedCreatorServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCreatorServiceServer")
}

// mustEmbedUnimplementedCreatorServiceServer indicates an expected call of mustEmbedUnimplementedCreatorServiceServer.
func (mr *MockUnsafeCreatorServiceServerMockRecorder) mustEmbedUnimplementedCreatorServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCreatorServiceServer", reflect.TypeOf((*MockUnsafeCreatorServiceServer)(nil).mustEmbedUnimplementedCreatorServiceServer))
}
