// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: creator.proto

package generated

import (
	context "context"
	proto "github.com/go-park-mail-ru/2023_1_4from5/internal/models/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CreatorServiceClient is the client API for CreatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreatorServiceClient interface {
	FindCreators(ctx context.Context, in *KeywordMessage, opts ...grpc.CallOption) (*CreatorsMessage, error)
	GetPage(ctx context.Context, in *UserCreatorMessage, opts ...grpc.CallOption) (*CreatorPage, error)
	UpdateCreatorData(ctx context.Context, in *UpdateCreatorInfo, opts ...grpc.CallOption) (*proto.Empty, error)
	GetFeed(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*PostsMessage, error)
	GetAllCreators(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*CreatorsMessage, error)
	IsCreator(ctx context.Context, in *UserCreatorMessage, opts ...grpc.CallOption) (*FlagMessage, error)
	CreateAim(ctx context.Context, in *Aim, opts ...grpc.CallOption) (*proto.Empty, error)
	CheckIfCreator(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.UUIDResponse, error)
	CreatePost(ctx context.Context, in *PostCreationData, opts ...grpc.CallOption) (*proto.Empty, error)
	GetPost(ctx context.Context, in *PostUserMessage, opts ...grpc.CallOption) (*PostMessage, error)
	DeletePost(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.Empty, error)
	IsPostOwner(ctx context.Context, in *PostUserMessage, opts ...grpc.CallOption) (*FlagMessage, error)
	AddLike(ctx context.Context, in *PostUserMessage, opts ...grpc.CallOption) (*Like, error)
	RemoveLike(ctx context.Context, in *PostUserMessage, opts ...grpc.CallOption) (*Like, error)
	EditPost(ctx context.Context, in *PostEditData, opts ...grpc.CallOption) (*proto.Empty, error)
	DeleteAttachmentsFiles(ctx context.Context, in *Attachments, opts ...grpc.CallOption) (*proto.Empty, error)
	DeleteAttachmentsByPostID(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.Empty, error)
	DeleteAttachment(ctx context.Context, in *PostAttachMessage, opts ...grpc.CallOption) (*proto.Empty, error)
	AddAttach(ctx context.Context, in *PostAttachMessage, opts ...grpc.CallOption) (*proto.Empty, error)
	GetFileExtension(ctx context.Context, in *KeywordMessage, opts ...grpc.CallOption) (*Extension, error)
	UpdateProfilePhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.UUIDResponse, error)
	DeleteProfilePhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.Empty, error)
	UpdateCoverPhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.UUIDResponse, error)
	DeleteCoverPhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.Empty, error)
	CreateSubscription(ctx context.Context, in *proto.Subscription, opts ...grpc.CallOption) (*proto.Empty, error)
	DeleteSubscription(ctx context.Context, in *SubscriptionCreatorMessage, opts ...grpc.CallOption) (*proto.Empty, error)
	EditSubscription(ctx context.Context, in *proto.Subscription, opts ...grpc.CallOption) (*proto.Empty, error)
}

type creatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreatorServiceClient(cc grpc.ClientConnInterface) CreatorServiceClient {
	return &creatorServiceClient{cc}
}

func (c *creatorServiceClient) FindCreators(ctx context.Context, in *KeywordMessage, opts ...grpc.CallOption) (*CreatorsMessage, error) {
	out := new(CreatorsMessage)
	err := c.cc.Invoke(ctx, "/CreatorService/FindCreators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) GetPage(ctx context.Context, in *UserCreatorMessage, opts ...grpc.CallOption) (*CreatorPage, error) {
	out := new(CreatorPage)
	err := c.cc.Invoke(ctx, "/CreatorService/GetPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) UpdateCreatorData(ctx context.Context, in *UpdateCreatorInfo, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/CreatorService/UpdateCreatorData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) GetFeed(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*PostsMessage, error) {
	out := new(PostsMessage)
	err := c.cc.Invoke(ctx, "/CreatorService/GetFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) GetAllCreators(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*CreatorsMessage, error) {
	out := new(CreatorsMessage)
	err := c.cc.Invoke(ctx, "/CreatorService/GetAllCreators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) IsCreator(ctx context.Context, in *UserCreatorMessage, opts ...grpc.CallOption) (*FlagMessage, error) {
	out := new(FlagMessage)
	err := c.cc.Invoke(ctx, "/CreatorService/IsCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) CreateAim(ctx context.Context, in *Aim, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/CreatorService/CreateAim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) CheckIfCreator(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.UUIDResponse, error) {
	out := new(proto.UUIDResponse)
	err := c.cc.Invoke(ctx, "/CreatorService/CheckIfCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) CreatePost(ctx context.Context, in *PostCreationData, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/CreatorService/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) GetPost(ctx context.Context, in *PostUserMessage, opts ...grpc.CallOption) (*PostMessage, error) {
	out := new(PostMessage)
	err := c.cc.Invoke(ctx, "/CreatorService/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) DeletePost(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/CreatorService/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) IsPostOwner(ctx context.Context, in *PostUserMessage, opts ...grpc.CallOption) (*FlagMessage, error) {
	out := new(FlagMessage)
	err := c.cc.Invoke(ctx, "/CreatorService/IsPostOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) AddLike(ctx context.Context, in *PostUserMessage, opts ...grpc.CallOption) (*Like, error) {
	out := new(Like)
	err := c.cc.Invoke(ctx, "/CreatorService/AddLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) RemoveLike(ctx context.Context, in *PostUserMessage, opts ...grpc.CallOption) (*Like, error) {
	out := new(Like)
	err := c.cc.Invoke(ctx, "/CreatorService/RemoveLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) EditPost(ctx context.Context, in *PostEditData, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/CreatorService/EditPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) DeleteAttachmentsFiles(ctx context.Context, in *Attachments, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/CreatorService/DeleteAttachmentsFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) DeleteAttachmentsByPostID(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/CreatorService/DeleteAttachmentsByPostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) DeleteAttachment(ctx context.Context, in *PostAttachMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/CreatorService/DeleteAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) AddAttach(ctx context.Context, in *PostAttachMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/CreatorService/AddAttach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) GetFileExtension(ctx context.Context, in *KeywordMessage, opts ...grpc.CallOption) (*Extension, error) {
	out := new(Extension)
	err := c.cc.Invoke(ctx, "/CreatorService/GetFileExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) UpdateProfilePhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.UUIDResponse, error) {
	out := new(proto.UUIDResponse)
	err := c.cc.Invoke(ctx, "/CreatorService/UpdateProfilePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) DeleteProfilePhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/CreatorService/DeleteProfilePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) UpdateCoverPhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.UUIDResponse, error) {
	out := new(proto.UUIDResponse)
	err := c.cc.Invoke(ctx, "/CreatorService/UpdateCoverPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) DeleteCoverPhoto(ctx context.Context, in *proto.UUIDMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/CreatorService/DeleteCoverPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) CreateSubscription(ctx context.Context, in *proto.Subscription, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/CreatorService/CreateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) DeleteSubscription(ctx context.Context, in *SubscriptionCreatorMessage, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/CreatorService/DeleteSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) EditSubscription(ctx context.Context, in *proto.Subscription, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/CreatorService/EditSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreatorServiceServer is the server API for CreatorService service.
// All implementations must embed UnimplementedCreatorServiceServer
// for forward compatibility
type CreatorServiceServer interface {
	FindCreators(context.Context, *KeywordMessage) (*CreatorsMessage, error)
	GetPage(context.Context, *UserCreatorMessage) (*CreatorPage, error)
	UpdateCreatorData(context.Context, *UpdateCreatorInfo) (*proto.Empty, error)
	GetFeed(context.Context, *proto.UUIDMessage) (*PostsMessage, error)
	GetAllCreators(context.Context, *proto.Empty) (*CreatorsMessage, error)
	IsCreator(context.Context, *UserCreatorMessage) (*FlagMessage, error)
	CreateAim(context.Context, *Aim) (*proto.Empty, error)
	CheckIfCreator(context.Context, *proto.UUIDMessage) (*proto.UUIDResponse, error)
	CreatePost(context.Context, *PostCreationData) (*proto.Empty, error)
	GetPost(context.Context, *PostUserMessage) (*PostMessage, error)
	DeletePost(context.Context, *proto.UUIDMessage) (*proto.Empty, error)
	IsPostOwner(context.Context, *PostUserMessage) (*FlagMessage, error)
	AddLike(context.Context, *PostUserMessage) (*Like, error)
	RemoveLike(context.Context, *PostUserMessage) (*Like, error)
	EditPost(context.Context, *PostEditData) (*proto.Empty, error)
	DeleteAttachmentsFiles(context.Context, *Attachments) (*proto.Empty, error)
	DeleteAttachmentsByPostID(context.Context, *proto.UUIDMessage) (*proto.Empty, error)
	DeleteAttachment(context.Context, *PostAttachMessage) (*proto.Empty, error)
	AddAttach(context.Context, *PostAttachMessage) (*proto.Empty, error)
	GetFileExtension(context.Context, *KeywordMessage) (*Extension, error)
	UpdateProfilePhoto(context.Context, *proto.UUIDMessage) (*proto.UUIDResponse, error)
	DeleteProfilePhoto(context.Context, *proto.UUIDMessage) (*proto.Empty, error)
	UpdateCoverPhoto(context.Context, *proto.UUIDMessage) (*proto.UUIDResponse, error)
	DeleteCoverPhoto(context.Context, *proto.UUIDMessage) (*proto.Empty, error)
	CreateSubscription(context.Context, *proto.Subscription) (*proto.Empty, error)
	DeleteSubscription(context.Context, *SubscriptionCreatorMessage) (*proto.Empty, error)
	EditSubscription(context.Context, *proto.Subscription) (*proto.Empty, error)
	mustEmbedUnimplementedCreatorServiceServer()
}

// UnimplementedCreatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCreatorServiceServer struct {
}

func (UnimplementedCreatorServiceServer) FindCreators(context.Context, *KeywordMessage) (*CreatorsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCreators not implemented")
}
func (UnimplementedCreatorServiceServer) GetPage(context.Context, *UserCreatorMessage) (*CreatorPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (UnimplementedCreatorServiceServer) UpdateCreatorData(context.Context, *UpdateCreatorInfo) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCreatorData not implemented")
}
func (UnimplementedCreatorServiceServer) GetFeed(context.Context, *proto.UUIDMessage) (*PostsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedCreatorServiceServer) GetAllCreators(context.Context, *proto.Empty) (*CreatorsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCreators not implemented")
}
func (UnimplementedCreatorServiceServer) IsCreator(context.Context, *UserCreatorMessage) (*FlagMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCreator not implemented")
}
func (UnimplementedCreatorServiceServer) CreateAim(context.Context, *Aim) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAim not implemented")
}
func (UnimplementedCreatorServiceServer) CheckIfCreator(context.Context, *proto.UUIDMessage) (*proto.UUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfCreator not implemented")
}
func (UnimplementedCreatorServiceServer) CreatePost(context.Context, *PostCreationData) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedCreatorServiceServer) GetPost(context.Context, *PostUserMessage) (*PostMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedCreatorServiceServer) DeletePost(context.Context, *proto.UUIDMessage) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedCreatorServiceServer) IsPostOwner(context.Context, *PostUserMessage) (*FlagMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPostOwner not implemented")
}
func (UnimplementedCreatorServiceServer) AddLike(context.Context, *PostUserMessage) (*Like, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLike not implemented")
}
func (UnimplementedCreatorServiceServer) RemoveLike(context.Context, *PostUserMessage) (*Like, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLike not implemented")
}
func (UnimplementedCreatorServiceServer) EditPost(context.Context, *PostEditData) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPost not implemented")
}
func (UnimplementedCreatorServiceServer) DeleteAttachmentsFiles(context.Context, *Attachments) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttachmentsFiles not implemented")
}
func (UnimplementedCreatorServiceServer) DeleteAttachmentsByPostID(context.Context, *proto.UUIDMessage) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttachmentsByPostID not implemented")
}
func (UnimplementedCreatorServiceServer) DeleteAttachment(context.Context, *PostAttachMessage) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttachment not implemented")
}
func (UnimplementedCreatorServiceServer) AddAttach(context.Context, *PostAttachMessage) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttach not implemented")
}
func (UnimplementedCreatorServiceServer) GetFileExtension(context.Context, *KeywordMessage) (*Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileExtension not implemented")
}
func (UnimplementedCreatorServiceServer) UpdateProfilePhoto(context.Context, *proto.UUIDMessage) (*proto.UUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfilePhoto not implemented")
}
func (UnimplementedCreatorServiceServer) DeleteProfilePhoto(context.Context, *proto.UUIDMessage) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfilePhoto not implemented")
}
func (UnimplementedCreatorServiceServer) UpdateCoverPhoto(context.Context, *proto.UUIDMessage) (*proto.UUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoverPhoto not implemented")
}
func (UnimplementedCreatorServiceServer) DeleteCoverPhoto(context.Context, *proto.UUIDMessage) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoverPhoto not implemented")
}
func (UnimplementedCreatorServiceServer) CreateSubscription(context.Context, *proto.Subscription) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedCreatorServiceServer) DeleteSubscription(context.Context, *SubscriptionCreatorMessage) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (UnimplementedCreatorServiceServer) EditSubscription(context.Context, *proto.Subscription) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditSubscription not implemented")
}
func (UnimplementedCreatorServiceServer) mustEmbedUnimplementedCreatorServiceServer() {}

// UnsafeCreatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreatorServiceServer will
// result in compilation errors.
type UnsafeCreatorServiceServer interface {
	mustEmbedUnimplementedCreatorServiceServer()
}

func RegisterCreatorServiceServer(s grpc.ServiceRegistrar, srv CreatorServiceServer) {
	s.RegisterService(&CreatorService_ServiceDesc, srv)
}

func _CreatorService_FindCreators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeywordMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).FindCreators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/FindCreators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).FindCreators(ctx, req.(*KeywordMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreatorMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/GetPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).GetPage(ctx, req.(*UserCreatorMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_UpdateCreatorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCreatorInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).UpdateCreatorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/UpdateCreatorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).UpdateCreatorData(ctx, req.(*UpdateCreatorInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/GetFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).GetFeed(ctx, req.(*proto.UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_GetAllCreators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).GetAllCreators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/GetAllCreators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).GetAllCreators(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_IsCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreatorMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).IsCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/IsCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).IsCreator(ctx, req.(*UserCreatorMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_CreateAim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Aim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).CreateAim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/CreateAim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).CreateAim(ctx, req.(*Aim))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_CheckIfCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).CheckIfCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/CheckIfCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).CheckIfCreator(ctx, req.(*proto.UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCreationData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).CreatePost(ctx, req.(*PostCreationData))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).GetPost(ctx, req.(*PostUserMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).DeletePost(ctx, req.(*proto.UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_IsPostOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).IsPostOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/IsPostOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).IsPostOwner(ctx, req.(*PostUserMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_AddLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).AddLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/AddLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).AddLike(ctx, req.(*PostUserMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_RemoveLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).RemoveLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/RemoveLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).RemoveLike(ctx, req.(*PostUserMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_EditPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostEditData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).EditPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/EditPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).EditPost(ctx, req.(*PostEditData))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_DeleteAttachmentsFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Attachments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).DeleteAttachmentsFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/DeleteAttachmentsFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).DeleteAttachmentsFiles(ctx, req.(*Attachments))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_DeleteAttachmentsByPostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).DeleteAttachmentsByPostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/DeleteAttachmentsByPostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).DeleteAttachmentsByPostID(ctx, req.(*proto.UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_DeleteAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAttachMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).DeleteAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/DeleteAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).DeleteAttachment(ctx, req.(*PostAttachMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_AddAttach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAttachMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).AddAttach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/AddAttach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).AddAttach(ctx, req.(*PostAttachMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_GetFileExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeywordMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).GetFileExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/GetFileExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).GetFileExtension(ctx, req.(*KeywordMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_UpdateProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).UpdateProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/UpdateProfilePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).UpdateProfilePhoto(ctx, req.(*proto.UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_DeleteProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).DeleteProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/DeleteProfilePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).DeleteProfilePhoto(ctx, req.(*proto.UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_UpdateCoverPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).UpdateCoverPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/UpdateCoverPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).UpdateCoverPhoto(ctx, req.(*proto.UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_DeleteCoverPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UUIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).DeleteCoverPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/DeleteCoverPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).DeleteCoverPhoto(ctx, req.(*proto.UUIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/CreateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).CreateSubscription(ctx, req.(*proto.Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionCreatorMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/DeleteSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).DeleteSubscription(ctx, req.(*SubscriptionCreatorMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_EditSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).EditSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreatorService/EditSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).EditSubscription(ctx, req.(*proto.Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

// CreatorService_ServiceDesc is the grpc.ServiceDesc for CreatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CreatorService",
	HandlerType: (*CreatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindCreators",
			Handler:    _CreatorService_FindCreators_Handler,
		},
		{
			MethodName: "GetPage",
			Handler:    _CreatorService_GetPage_Handler,
		},
		{
			MethodName: "UpdateCreatorData",
			Handler:    _CreatorService_UpdateCreatorData_Handler,
		},
		{
			MethodName: "GetFeed",
			Handler:    _CreatorService_GetFeed_Handler,
		},
		{
			MethodName: "GetAllCreators",
			Handler:    _CreatorService_GetAllCreators_Handler,
		},
		{
			MethodName: "IsCreator",
			Handler:    _CreatorService_IsCreator_Handler,
		},
		{
			MethodName: "CreateAim",
			Handler:    _CreatorService_CreateAim_Handler,
		},
		{
			MethodName: "CheckIfCreator",
			Handler:    _CreatorService_CheckIfCreator_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _CreatorService_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _CreatorService_GetPost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _CreatorService_DeletePost_Handler,
		},
		{
			MethodName: "IsPostOwner",
			Handler:    _CreatorService_IsPostOwner_Handler,
		},
		{
			MethodName: "AddLike",
			Handler:    _CreatorService_AddLike_Handler,
		},
		{
			MethodName: "RemoveLike",
			Handler:    _CreatorService_RemoveLike_Handler,
		},
		{
			MethodName: "EditPost",
			Handler:    _CreatorService_EditPost_Handler,
		},
		{
			MethodName: "DeleteAttachmentsFiles",
			Handler:    _CreatorService_DeleteAttachmentsFiles_Handler,
		},
		{
			MethodName: "DeleteAttachmentsByPostID",
			Handler:    _CreatorService_DeleteAttachmentsByPostID_Handler,
		},
		{
			MethodName: "DeleteAttachment",
			Handler:    _CreatorService_DeleteAttachment_Handler,
		},
		{
			MethodName: "AddAttach",
			Handler:    _CreatorService_AddAttach_Handler,
		},
		{
			MethodName: "GetFileExtension",
			Handler:    _CreatorService_GetFileExtension_Handler,
		},
		{
			MethodName: "UpdateProfilePhoto",
			Handler:    _CreatorService_UpdateProfilePhoto_Handler,
		},
		{
			MethodName: "DeleteProfilePhoto",
			Handler:    _CreatorService_DeleteProfilePhoto_Handler,
		},
		{
			MethodName: "UpdateCoverPhoto",
			Handler:    _CreatorService_UpdateCoverPhoto_Handler,
		},
		{
			MethodName: "DeleteCoverPhoto",
			Handler:    _CreatorService_DeleteCoverPhoto_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _CreatorService_CreateSubscription_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _CreatorService_DeleteSubscription_Handler,
		},
		{
			MethodName: "EditSubscription",
			Handler:    _CreatorService_EditSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "creator.proto",
}
