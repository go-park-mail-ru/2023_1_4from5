// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_4from5/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAttachmentUsecase is a mock of AttachmentUsecase interface.
type MockAttachmentUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAttachmentUsecaseMockRecorder
}

// MockAttachmentUsecaseMockRecorder is the mock recorder for MockAttachmentUsecase.
type MockAttachmentUsecaseMockRecorder struct {
	mock *MockAttachmentUsecase
}

// NewMockAttachmentUsecase creates a new mock instance.
func NewMockAttachmentUsecase(ctrl *gomock.Controller) *MockAttachmentUsecase {
	mock := &MockAttachmentUsecase{ctrl: ctrl}
	mock.recorder = &MockAttachmentUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttachmentUsecase) EXPECT() *MockAttachmentUsecaseMockRecorder {
	return m.recorder
}

// CreateAttach mocks base method.
func (m *MockAttachmentUsecase) CreateAttach(postID uuid.UUID, attachments ...models.AttachmentData) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{postID}
	for _, a := range attachments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAttach", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttach indicates an expected call of CreateAttach.
func (mr *MockAttachmentUsecaseMockRecorder) CreateAttach(postID interface{}, attachments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{postID}, attachments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttach", reflect.TypeOf((*MockAttachmentUsecase)(nil).CreateAttach), varargs...)
}

// MockAttachmentRepo is a mock of AttachmentRepo interface.
type MockAttachmentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAttachmentRepoMockRecorder
}

// MockAttachmentRepoMockRecorder is the mock recorder for MockAttachmentRepo.
type MockAttachmentRepoMockRecorder struct {
	mock *MockAttachmentRepo
}

// NewMockAttachmentRepo creates a new mock instance.
func NewMockAttachmentRepo(ctrl *gomock.Controller) *MockAttachmentRepo {
	mock := &MockAttachmentRepo{ctrl: ctrl}
	mock.recorder = &MockAttachmentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttachmentRepo) EXPECT() *MockAttachmentRepoMockRecorder {
	return m.recorder
}

// CreateAttach mocks base method.
func (m *MockAttachmentRepo) CreateAttach(postID uuid.UUID, attachment models.AttachmentData) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttach", postID, attachment)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttach indicates an expected call of CreateAttach.
func (mr *MockAttachmentRepoMockRecorder) CreateAttach(postID, attachment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttach", reflect.TypeOf((*MockAttachmentRepo)(nil).CreateAttach), postID, attachment)
}
