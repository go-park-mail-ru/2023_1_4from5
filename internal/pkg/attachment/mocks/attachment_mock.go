// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_4from5/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAttachmentUsecase is a mock of AttachmentUsecase interface.
type MockAttachmentUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAttachmentUsecaseMockRecorder
}

// MockAttachmentUsecaseMockRecorder is the mock recorder for MockAttachmentUsecase.
type MockAttachmentUsecaseMockRecorder struct {
	mock *MockAttachmentUsecase
}

// NewMockAttachmentUsecase creates a new mock instance.
func NewMockAttachmentUsecase(ctrl *gomock.Controller) *MockAttachmentUsecase {
	mock := &MockAttachmentUsecase{ctrl: ctrl}
	mock.recorder = &MockAttachmentUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttachmentUsecase) EXPECT() *MockAttachmentUsecaseMockRecorder {
	return m.recorder
}

// AddAttach mocks base method.
func (m *MockAttachmentUsecase) AddAttach(ctx context.Context, postID uuid.UUID, attachment models.AttachmentData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAttach", ctx, postID, attachment)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAttach indicates an expected call of AddAttach.
func (mr *MockAttachmentUsecaseMockRecorder) AddAttach(ctx, postID, attachment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttach", reflect.TypeOf((*MockAttachmentUsecase)(nil).AddAttach), ctx, postID, attachment)
}

// CreateAttachments mocks base method.
func (m *MockAttachmentUsecase) CreateAttachments(ctx context.Context, attachments ...models.AttachmentData) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range attachments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAttachments", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttachments indicates an expected call of CreateAttachments.
func (mr *MockAttachmentUsecaseMockRecorder) CreateAttachments(ctx interface{}, attachments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, attachments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttachments", reflect.TypeOf((*MockAttachmentUsecase)(nil).CreateAttachments), varargs...)
}

// DeleteAttachment mocks base method.
func (m *MockAttachmentUsecase) DeleteAttachment(ctx context.Context, postID uuid.UUID, attach models.AttachmentData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachment", ctx, postID, attach)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAttachment indicates an expected call of DeleteAttachment.
func (mr *MockAttachmentUsecaseMockRecorder) DeleteAttachment(ctx, postID, attach interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachment", reflect.TypeOf((*MockAttachmentUsecase)(nil).DeleteAttachment), ctx, postID, attach)
}

// DeleteAttachmentsByPostID mocks base method.
func (m *MockAttachmentUsecase) DeleteAttachmentsByPostID(ctx context.Context, postID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachmentsByPostID", ctx, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAttachmentsByPostID indicates an expected call of DeleteAttachmentsByPostID.
func (mr *MockAttachmentUsecaseMockRecorder) DeleteAttachmentsByPostID(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachmentsByPostID", reflect.TypeOf((*MockAttachmentUsecase)(nil).DeleteAttachmentsByPostID), ctx, postID)
}

// DeleteAttachmentsFiles mocks base method.
func (m *MockAttachmentUsecase) DeleteAttachmentsFiles(ctx context.Context, attachments ...models.AttachmentData) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range attachments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAttachmentsFiles", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAttachmentsFiles indicates an expected call of DeleteAttachmentsFiles.
func (mr *MockAttachmentUsecaseMockRecorder) DeleteAttachmentsFiles(ctx interface{}, attachments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, attachments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachmentsFiles", reflect.TypeOf((*MockAttachmentUsecase)(nil).DeleteAttachmentsFiles), varargs...)
}

// MockAttachmentRepo is a mock of AttachmentRepo interface.
type MockAttachmentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAttachmentRepoMockRecorder
}

// MockAttachmentRepoMockRecorder is the mock recorder for MockAttachmentRepo.
type MockAttachmentRepoMockRecorder struct {
	mock *MockAttachmentRepo
}

// NewMockAttachmentRepo creates a new mock instance.
func NewMockAttachmentRepo(ctrl *gomock.Controller) *MockAttachmentRepo {
	mock := &MockAttachmentRepo{ctrl: ctrl}
	mock.recorder = &MockAttachmentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttachmentRepo) EXPECT() *MockAttachmentRepoMockRecorder {
	return m.recorder
}

// CreateAttachment mocks base method.
func (m *MockAttachmentRepo) CreateAttachment(ctx context.Context, postID, attachmentID uuid.UUID, attachmentType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttachment", ctx, postID, attachmentID, attachmentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttachment indicates an expected call of CreateAttachment.
func (mr *MockAttachmentRepoMockRecorder) CreateAttachment(ctx, postID, attachmentID, attachmentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttachment", reflect.TypeOf((*MockAttachmentRepo)(nil).CreateAttachment), ctx, postID, attachmentID, attachmentType)
}

// DeleteAttachment mocks base method.
func (m *MockAttachmentRepo) DeleteAttachment(ctx context.Context, attachmentID, postID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachment", ctx, attachmentID, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAttachment indicates an expected call of DeleteAttachment.
func (mr *MockAttachmentRepoMockRecorder) DeleteAttachment(ctx, attachmentID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachment", reflect.TypeOf((*MockAttachmentRepo)(nil).DeleteAttachment), ctx, attachmentID, postID)
}

// DeleteAttachmentsByPostID mocks base method.
func (m *MockAttachmentRepo) DeleteAttachmentsByPostID(ctx context.Context, postID uuid.UUID) ([]models.AttachmentData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachmentsByPostID", ctx, postID)
	ret0, _ := ret[0].([]models.AttachmentData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttachmentsByPostID indicates an expected call of DeleteAttachmentsByPostID.
func (mr *MockAttachmentRepoMockRecorder) DeleteAttachmentsByPostID(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachmentsByPostID", reflect.TypeOf((*MockAttachmentRepo)(nil).DeleteAttachmentsByPostID), ctx, postID)
}
