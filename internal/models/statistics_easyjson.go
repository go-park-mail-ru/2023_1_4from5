// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson957004edDecodeGithubComGoParkMailRu202314from5InternalModels(in *jlexer.Lexer, out *StatisticsDates) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "creator_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.CreatorId).UnmarshalText(data))
			}
		case "first_month":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FirstMonth).UnmarshalJSON(data))
			}
		case "second_month":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SecondMonth).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson957004edEncodeGithubComGoParkMailRu202314from5InternalModels(out *jwriter.Writer, in StatisticsDates) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"creator_id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.CreatorId).MarshalText())
	}
	{
		const prefix string = ",\"first_month\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.FirstMonth).MarshalJSON())
	}
	{
		const prefix string = ",\"second_month\":"
		out.RawString(prefix)
		out.Raw((in.SecondMonth).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatisticsDates) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson957004edEncodeGithubComGoParkMailRu202314from5InternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatisticsDates) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson957004edEncodeGithubComGoParkMailRu202314from5InternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatisticsDates) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson957004edDecodeGithubComGoParkMailRu202314from5InternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatisticsDates) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson957004edDecodeGithubComGoParkMailRu202314from5InternalModels(l, v)
}
func easyjson957004edDecodeGithubComGoParkMailRu202314from5InternalModels1(in *jlexer.Lexer, out *Statistics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "creator_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.CreatorId).UnmarshalText(data))
			}
		case "posts_per_month":
			out.PostsPerMonth = int64(in.Int64())
		case "subscriptions_bought":
			out.SubscriptionsBought = int64(in.Int64())
		case "donations_count":
			out.DonationsCount = int64(in.Int64())
		case "money_from_donations":
			out.MoneyFromDonations = float64(in.Float64())
		case "money_from_subscriptions":
			out.MoneyFromSubscriptions = float64(in.Float64())
		case "new_followers":
			out.NewFollowers = int64(in.Int64())
		case "likes_count":
			out.LikesCount = int64(in.Int64())
		case "comments_count":
			out.CommentsCount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson957004edEncodeGithubComGoParkMailRu202314from5InternalModels1(out *jwriter.Writer, in Statistics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"creator_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.CreatorId).MarshalText())
	}
	{
		const prefix string = ",\"posts_per_month\":"
		out.RawString(prefix)
		out.Int64(int64(in.PostsPerMonth))
	}
	{
		const prefix string = ",\"subscriptions_bought\":"
		out.RawString(prefix)
		out.Int64(int64(in.SubscriptionsBought))
	}
	{
		const prefix string = ",\"donations_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.DonationsCount))
	}
	{
		const prefix string = ",\"money_from_donations\":"
		out.RawString(prefix)
		out.Float64(float64(in.MoneyFromDonations))
	}
	{
		const prefix string = ",\"money_from_subscriptions\":"
		out.RawString(prefix)
		out.Float64(float64(in.MoneyFromSubscriptions))
	}
	{
		const prefix string = ",\"new_followers\":"
		out.RawString(prefix)
		out.Int64(int64(in.NewFollowers))
	}
	{
		const prefix string = ",\"likes_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.LikesCount))
	}
	{
		const prefix string = ",\"comments_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.CommentsCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Statistics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson957004edEncodeGithubComGoParkMailRu202314from5InternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Statistics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson957004edEncodeGithubComGoParkMailRu202314from5InternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Statistics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson957004edDecodeGithubComGoParkMailRu202314from5InternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Statistics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson957004edDecodeGithubComGoParkMailRu202314from5InternalModels1(l, v)
}
